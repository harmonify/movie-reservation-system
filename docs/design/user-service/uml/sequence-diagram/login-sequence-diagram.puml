@startuml jwt
!theme plain
skinparam style strictuml
hide footbox

title Sequence Diagram - Login

actor User
boundary Client
box "User Service"
control AuthRest
participant AuthService
participant TokenService
collections Util
database Storage
end box

User -> Client ++ : Input username, password
Client -> AuthRest ++ : POST /v1/login

AuthRest -> AuthService ++ : Login(username, password)

AuthService -> Storage ++ : Find user by username param
return user, error (if exist)

AuthService -> Util ++ : Compare password param with user hashed password
return match (bool), error (if exist)

AuthService -> TokenService ++ : Generate access token
TokenService -> Util ++ : Generate JWT
Util -> Util : Decrypt AES-encrypted user private key
Util -> Util : Parse user RSA private key from PEM
Util -> Util : Decrypt user public key
Util -> Util : Create new JWT with claims\niss=app URI\nsub=user UUID\naud=user RSA public key\nexp=15 minutes in the future (unix)\nnbf=now (unix)\niat=now (unix)\njti=random hex string
return jwt
return access token

AuthService -> Util ++ : Generate refresh token
return random base64
AuthService -> Util ++ : Hash refresh token
return hashed refresh token

AuthService -> Storage ++ : Store hashed refresh token
return error, if exist

return login result\n- access token\n- access token duration\n- refresh token\n- refresh token expiry time

return - refresh token as HTTPS-only cookie\n- access token (and its duration)
