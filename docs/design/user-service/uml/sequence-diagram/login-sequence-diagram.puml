@startuml jwt
!theme plain
skinparam style strictuml
hide footbox
actor User
User -> AuthRest ++ : POST /auth/login
AuthRest -> AuthService ++ : Login(username, password)

AuthService -> Storage ++ : Find user by username param
return user, error (if exist)

AuthService -> EncryptionUtil ++ : Compare password param with user hashed password
return match (bool), error (if exist)

AuthService -> TokenService ++ : Generate access token
TokenService -> JWTUtil ++ : Generate JWT
JWTUtil -> JWTUtil : Decrypt AES-encrypted user private key
JWTUtil -> JWTUtil : Parse user RSA private key from PEM
JWTUtil -> JWTUtil : Decrypt user public key
JWTUtil -> JWTUtil : Create new JWT with claims\niss=app URI\nsub=user UUID\naud=user RSA public key\nexp=15 minutes in the future in unix\nnbf=now in unix\niat=now in unix\njti=random hex string
return jwt
return access token

AuthService -> GeneratorUtil ++ : Generate refresh token
return random base64
AuthService -> EncryptionUtil ++ : Hash refresh token
return hashed refresh token

AuthService -> Storage ++ : Store hashed refresh token
return error, if exist

return login result\n- access token\n- access token duration\n- refresh token\n- refresh token expiry time

return refresh token as HTTPS-only cookie & access token\n(and its duration) as HTTP response
