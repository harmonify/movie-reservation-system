// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	kafka "github.com/harmonify/movie-reservation-system/pkg/kafka"
	mock "github.com/stretchr/testify/mock"

	sarama "github.com/IBM/sarama"
)

// KafkaRouter is an autogenerated mock type for the KafkaRouter type
type KafkaRouter struct {
	mock.Mock
}

type KafkaRouter_Expecter struct {
	mock *mock.Mock
}

func (_m *KafkaRouter) EXPECT() *KafkaRouter_Expecter {
	return &KafkaRouter_Expecter{mock: &_m.Mock}
}

// Cleanup provides a mock function with given fields: _a0
func (_m *KafkaRouter) Cleanup(_a0 sarama.ConsumerGroupSession) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Cleanup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(sarama.ConsumerGroupSession) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// KafkaRouter_Cleanup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Cleanup'
type KafkaRouter_Cleanup_Call struct {
	*mock.Call
}

// Cleanup is a helper method to define mock.On call
//   - _a0 sarama.ConsumerGroupSession
func (_e *KafkaRouter_Expecter) Cleanup(_a0 interface{}) *KafkaRouter_Cleanup_Call {
	return &KafkaRouter_Cleanup_Call{Call: _e.mock.On("Cleanup", _a0)}
}

func (_c *KafkaRouter_Cleanup_Call) Run(run func(_a0 sarama.ConsumerGroupSession)) *KafkaRouter_Cleanup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(sarama.ConsumerGroupSession))
	})
	return _c
}

func (_c *KafkaRouter_Cleanup_Call) Return(_a0 error) *KafkaRouter_Cleanup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KafkaRouter_Cleanup_Call) RunAndReturn(run func(sarama.ConsumerGroupSession) error) *KafkaRouter_Cleanup_Call {
	_c.Call.Return(run)
	return _c
}

// ConsumeClaim provides a mock function with given fields: _a0, _a1
func (_m *KafkaRouter) ConsumeClaim(_a0 sarama.ConsumerGroupSession, _a1 sarama.ConsumerGroupClaim) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ConsumeClaim")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(sarama.ConsumerGroupSession, sarama.ConsumerGroupClaim) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// KafkaRouter_ConsumeClaim_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConsumeClaim'
type KafkaRouter_ConsumeClaim_Call struct {
	*mock.Call
}

// ConsumeClaim is a helper method to define mock.On call
//   - _a0 sarama.ConsumerGroupSession
//   - _a1 sarama.ConsumerGroupClaim
func (_e *KafkaRouter_Expecter) ConsumeClaim(_a0 interface{}, _a1 interface{}) *KafkaRouter_ConsumeClaim_Call {
	return &KafkaRouter_ConsumeClaim_Call{Call: _e.mock.On("ConsumeClaim", _a0, _a1)}
}

func (_c *KafkaRouter_ConsumeClaim_Call) Run(run func(_a0 sarama.ConsumerGroupSession, _a1 sarama.ConsumerGroupClaim)) *KafkaRouter_ConsumeClaim_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(sarama.ConsumerGroupSession), args[1].(sarama.ConsumerGroupClaim))
	})
	return _c
}

func (_c *KafkaRouter_ConsumeClaim_Call) Return(_a0 error) *KafkaRouter_ConsumeClaim_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KafkaRouter_ConsumeClaim_Call) RunAndReturn(run func(sarama.ConsumerGroupSession, sarama.ConsumerGroupClaim) error) *KafkaRouter_ConsumeClaim_Call {
	_c.Call.Return(run)
	return _c
}

// GetRoutes provides a mock function with given fields:
func (_m *KafkaRouter) GetRoutes() []kafka.Route {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetRoutes")
	}

	var r0 []kafka.Route
	if rf, ok := ret.Get(0).(func() []kafka.Route); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]kafka.Route)
		}
	}

	return r0
}

// KafkaRouter_GetRoutes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRoutes'
type KafkaRouter_GetRoutes_Call struct {
	*mock.Call
}

// GetRoutes is a helper method to define mock.On call
func (_e *KafkaRouter_Expecter) GetRoutes() *KafkaRouter_GetRoutes_Call {
	return &KafkaRouter_GetRoutes_Call{Call: _e.mock.On("GetRoutes")}
}

func (_c *KafkaRouter_GetRoutes_Call) Run(run func()) *KafkaRouter_GetRoutes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KafkaRouter_GetRoutes_Call) Return(_a0 []kafka.Route) *KafkaRouter_GetRoutes_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KafkaRouter_GetRoutes_Call) RunAndReturn(run func() []kafka.Route) *KafkaRouter_GetRoutes_Call {
	_c.Call.Return(run)
	return _c
}

// Ready provides a mock function with given fields:
func (_m *KafkaRouter) Ready() <-chan bool {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Ready")
	}

	var r0 <-chan bool
	if rf, ok := ret.Get(0).(func() <-chan bool); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan bool)
		}
	}

	return r0
}

// KafkaRouter_Ready_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ready'
type KafkaRouter_Ready_Call struct {
	*mock.Call
}

// Ready is a helper method to define mock.On call
func (_e *KafkaRouter_Expecter) Ready() *KafkaRouter_Ready_Call {
	return &KafkaRouter_Ready_Call{Call: _e.mock.On("Ready")}
}

func (_c *KafkaRouter_Ready_Call) Run(run func()) *KafkaRouter_Ready_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *KafkaRouter_Ready_Call) Return(_a0 <-chan bool) *KafkaRouter_Ready_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KafkaRouter_Ready_Call) RunAndReturn(run func() <-chan bool) *KafkaRouter_Ready_Call {
	_c.Call.Return(run)
	return _c
}

// Setup provides a mock function with given fields: _a0
func (_m *KafkaRouter) Setup(_a0 sarama.ConsumerGroupSession) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Setup")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(sarama.ConsumerGroupSession) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// KafkaRouter_Setup_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Setup'
type KafkaRouter_Setup_Call struct {
	*mock.Call
}

// Setup is a helper method to define mock.On call
//   - _a0 sarama.ConsumerGroupSession
func (_e *KafkaRouter_Expecter) Setup(_a0 interface{}) *KafkaRouter_Setup_Call {
	return &KafkaRouter_Setup_Call{Call: _e.mock.On("Setup", _a0)}
}

func (_c *KafkaRouter_Setup_Call) Run(run func(_a0 sarama.ConsumerGroupSession)) *KafkaRouter_Setup_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(sarama.ConsumerGroupSession))
	})
	return _c
}

func (_c *KafkaRouter_Setup_Call) Return(_a0 error) *KafkaRouter_Setup_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *KafkaRouter_Setup_Call) RunAndReturn(run func(sarama.ConsumerGroupSession) error) *KafkaRouter_Setup_Call {
	_c.Call.Return(run)
	return _c
}

// NewKafkaRouter creates a new instance of KafkaRouter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewKafkaRouter(t interface {
	mock.TestingT
	Cleanup(func())
}) *KafkaRouter {
	mock := &KafkaRouter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
