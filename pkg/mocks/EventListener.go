// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	kafka "github.com/harmonify/movie-reservation-system/pkg/kafka"
	mock "github.com/stretchr/testify/mock"
)

// EventListener is an autogenerated mock type for the EventListener type
type EventListener struct {
	mock.Mock
}

type EventListener_Expecter struct {
	mock *mock.Mock
}

func (_m *EventListener) EXPECT() *EventListener_Expecter {
	return &EventListener_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *EventListener) Close() {
	_m.Called()
}

// EventListener_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type EventListener_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *EventListener_Expecter) Close() *EventListener_Close_Call {
	return &EventListener_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *EventListener_Close_Call) Run(run func()) *EventListener_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EventListener_Close_Call) Return() *EventListener_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *EventListener_Close_Call) RunAndReturn(run func()) *EventListener_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Events provides a mock function with given fields:
func (_m *EventListener) Events() <-chan *kafka.ChanneledEvent {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Events")
	}

	var r0 <-chan *kafka.ChanneledEvent
	if rf, ok := ret.Get(0).(func() <-chan *kafka.ChanneledEvent); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *kafka.ChanneledEvent)
		}
	}

	return r0
}

// EventListener_Events_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Events'
type EventListener_Events_Call struct {
	*mock.Call
}

// Events is a helper method to define mock.On call
func (_e *EventListener_Expecter) Events() *EventListener_Events_Call {
	return &EventListener_Events_Call{Call: _e.mock.On("Events")}
}

func (_c *EventListener_Events_Call) Run(run func()) *EventListener_Events_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *EventListener_Events_Call) Return(_a0 <-chan *kafka.ChanneledEvent) *EventListener_Events_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *EventListener_Events_Call) RunAndReturn(run func() <-chan *kafka.ChanneledEvent) *EventListener_Events_Call {
	_c.Call.Return(run)
	return _c
}

// OnEvent provides a mock function with given fields: ctx, event
func (_m *EventListener) OnEvent(ctx context.Context, event *kafka.Event) {
	_m.Called(ctx, event)
}

// EventListener_OnEvent_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnEvent'
type EventListener_OnEvent_Call struct {
	*mock.Call
}

// OnEvent is a helper method to define mock.On call
//   - ctx context.Context
//   - event *kafka.Event
func (_e *EventListener_Expecter) OnEvent(ctx interface{}, event interface{}) *EventListener_OnEvent_Call {
	return &EventListener_OnEvent_Call{Call: _e.mock.On("OnEvent", ctx, event)}
}

func (_c *EventListener_OnEvent_Call) Run(run func(ctx context.Context, event *kafka.Event)) *EventListener_OnEvent_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*kafka.Event))
	})
	return _c
}

func (_c *EventListener_OnEvent_Call) Return() *EventListener_OnEvent_Call {
	_c.Call.Return()
	return _c
}

func (_c *EventListener_OnEvent_Call) RunAndReturn(run func(context.Context, *kafka.Event)) *EventListener_OnEvent_Call {
	_c.Call.Return(run)
	return _c
}

// NewEventListener creates a new instance of EventListener. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewEventListener(t interface {
	mock.TestingT
	Cleanup(func())
}) *EventListener {
	mock := &EventListener{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
