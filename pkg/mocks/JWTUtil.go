// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	jwt_util "github.com/harmonify/movie-reservation-system/pkg/util/jwt"
	mock "github.com/stretchr/testify/mock"
)

// JWTUtil is an autogenerated mock type for the JWTUtil type
type JWTUtil struct {
	mock.Mock
}

type JWTUtil_Expecter struct {
	mock *mock.Mock
}

func (_m *JWTUtil) EXPECT() *JWTUtil_Expecter {
	return &JWTUtil_Expecter{mock: &_m.Mock}
}

// JWTSign provides a mock function with given fields: payload
func (_m *JWTUtil) JWTSign(payload *jwt_util.JWTPayload) (string, error) {
	ret := _m.Called(payload)

	if len(ret) == 0 {
		panic("no return value specified for JWTSign")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(*jwt_util.JWTPayload) (string, error)); ok {
		return rf(payload)
	}
	if rf, ok := ret.Get(0).(func(*jwt_util.JWTPayload) string); ok {
		r0 = rf(payload)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(*jwt_util.JWTPayload) error); ok {
		r1 = rf(payload)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JWTUtil_JWTSign_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JWTSign'
type JWTUtil_JWTSign_Call struct {
	*mock.Call
}

// JWTSign is a helper method to define mock.On call
//   - payload *jwt_util.JWTPayload
func (_e *JWTUtil_Expecter) JWTSign(payload interface{}) *JWTUtil_JWTSign_Call {
	return &JWTUtil_JWTSign_Call{Call: _e.mock.On("JWTSign", payload)}
}

func (_c *JWTUtil_JWTSign_Call) Run(run func(payload *jwt_util.JWTPayload)) *JWTUtil_JWTSign_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*jwt_util.JWTPayload))
	})
	return _c
}

func (_c *JWTUtil_JWTSign_Call) Return(_a0 string, _a1 error) *JWTUtil_JWTSign_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *JWTUtil_JWTSign_Call) RunAndReturn(run func(*jwt_util.JWTPayload) (string, error)) *JWTUtil_JWTSign_Call {
	_c.Call.Return(run)
	return _c
}

// JWTVerify provides a mock function with given fields: accessToken
func (_m *JWTUtil) JWTVerify(accessToken string) (*jwt_util.JWTBodyPayload, error) {
	ret := _m.Called(accessToken)

	if len(ret) == 0 {
		panic("no return value specified for JWTVerify")
	}

	var r0 *jwt_util.JWTBodyPayload
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*jwt_util.JWTBodyPayload, error)); ok {
		return rf(accessToken)
	}
	if rf, ok := ret.Get(0).(func(string) *jwt_util.JWTBodyPayload); ok {
		r0 = rf(accessToken)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*jwt_util.JWTBodyPayload)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// JWTUtil_JWTVerify_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'JWTVerify'
type JWTUtil_JWTVerify_Call struct {
	*mock.Call
}

// JWTVerify is a helper method to define mock.On call
//   - accessToken string
func (_e *JWTUtil_Expecter) JWTVerify(accessToken interface{}) *JWTUtil_JWTVerify_Call {
	return &JWTUtil_JWTVerify_Call{Call: _e.mock.On("JWTVerify", accessToken)}
}

func (_c *JWTUtil_JWTVerify_Call) Run(run func(accessToken string)) *JWTUtil_JWTVerify_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *JWTUtil_JWTVerify_Call) Return(_a0 *jwt_util.JWTBodyPayload, _a1 error) *JWTUtil_JWTVerify_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *JWTUtil_JWTVerify_Call) RunAndReturn(run func(string) (*jwt_util.JWTBodyPayload, error)) *JWTUtil_JWTVerify_Call {
	_c.Call.Return(run)
	return _c
}

// NewJWTUtil creates a new instance of JWTUtil. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewJWTUtil(t interface {
	mock.TestingT
	Cleanup(func())
}) *JWTUtil {
	mock := &JWTUtil{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
