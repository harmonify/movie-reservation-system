// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"

	ratelimiter "github.com/harmonify/movie-reservation-system/pkg/ratelimiter"
)

// RateLimiterHttpMiddleware is an autogenerated mock type for the RateLimiterHttpMiddleware type
type RateLimiterHttpMiddleware struct {
	mock.Mock
}

type RateLimiterHttpMiddleware_Expecter struct {
	mock *mock.Mock
}

func (_m *RateLimiterHttpMiddleware) EXPECT() *RateLimiterHttpMiddleware_Expecter {
	return &RateLimiterHttpMiddleware_Expecter{mock: &_m.Mock}
}

// LimitBy provides a mock function with given fields: cfg, f
func (_m *RateLimiterHttpMiddleware) LimitBy(cfg *ratelimiter.RateLimiterConfig, f func(*gin.Context) string) gin.HandlerFunc {
	ret := _m.Called(cfg, f)

	if len(ret) == 0 {
		panic("no return value specified for LimitBy")
	}

	var r0 gin.HandlerFunc
	if rf, ok := ret.Get(0).(func(*ratelimiter.RateLimiterConfig, func(*gin.Context) string) gin.HandlerFunc); ok {
		r0 = rf(cfg, f)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gin.HandlerFunc)
		}
	}

	return r0
}

// RateLimiterHttpMiddleware_LimitBy_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LimitBy'
type RateLimiterHttpMiddleware_LimitBy_Call struct {
	*mock.Call
}

// LimitBy is a helper method to define mock.On call
//   - cfg *ratelimiter.RateLimiterConfig
//   - f func(*gin.Context) string
func (_e *RateLimiterHttpMiddleware_Expecter) LimitBy(cfg interface{}, f interface{}) *RateLimiterHttpMiddleware_LimitBy_Call {
	return &RateLimiterHttpMiddleware_LimitBy_Call{Call: _e.mock.On("LimitBy", cfg, f)}
}

func (_c *RateLimiterHttpMiddleware_LimitBy_Call) Run(run func(cfg *ratelimiter.RateLimiterConfig, f func(*gin.Context) string)) *RateLimiterHttpMiddleware_LimitBy_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*ratelimiter.RateLimiterConfig), args[1].(func(*gin.Context) string))
	})
	return _c
}

func (_c *RateLimiterHttpMiddleware_LimitBy_Call) Return(_a0 gin.HandlerFunc) *RateLimiterHttpMiddleware_LimitBy_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RateLimiterHttpMiddleware_LimitBy_Call) RunAndReturn(run func(*ratelimiter.RateLimiterConfig, func(*gin.Context) string) gin.HandlerFunc) *RateLimiterHttpMiddleware_LimitBy_Call {
	_c.Call.Return(run)
	return _c
}

// LimitByIP provides a mock function with given fields: cfg
func (_m *RateLimiterHttpMiddleware) LimitByIP(cfg *ratelimiter.RateLimiterConfig) gin.HandlerFunc {
	ret := _m.Called(cfg)

	if len(ret) == 0 {
		panic("no return value specified for LimitByIP")
	}

	var r0 gin.HandlerFunc
	if rf, ok := ret.Get(0).(func(*ratelimiter.RateLimiterConfig) gin.HandlerFunc); ok {
		r0 = rf(cfg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gin.HandlerFunc)
		}
	}

	return r0
}

// RateLimiterHttpMiddleware_LimitByIP_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LimitByIP'
type RateLimiterHttpMiddleware_LimitByIP_Call struct {
	*mock.Call
}

// LimitByIP is a helper method to define mock.On call
//   - cfg *ratelimiter.RateLimiterConfig
func (_e *RateLimiterHttpMiddleware_Expecter) LimitByIP(cfg interface{}) *RateLimiterHttpMiddleware_LimitByIP_Call {
	return &RateLimiterHttpMiddleware_LimitByIP_Call{Call: _e.mock.On("LimitByIP", cfg)}
}

func (_c *RateLimiterHttpMiddleware_LimitByIP_Call) Run(run func(cfg *ratelimiter.RateLimiterConfig)) *RateLimiterHttpMiddleware_LimitByIP_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*ratelimiter.RateLimiterConfig))
	})
	return _c
}

func (_c *RateLimiterHttpMiddleware_LimitByIP_Call) Return(_a0 gin.HandlerFunc) *RateLimiterHttpMiddleware_LimitByIP_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RateLimiterHttpMiddleware_LimitByIP_Call) RunAndReturn(run func(*ratelimiter.RateLimiterConfig) gin.HandlerFunc) *RateLimiterHttpMiddleware_LimitByIP_Call {
	_c.Call.Return(run)
	return _c
}

// LimitByUUID provides a mock function with given fields: cfg
func (_m *RateLimiterHttpMiddleware) LimitByUUID(cfg *ratelimiter.RateLimiterConfig) gin.HandlerFunc {
	ret := _m.Called(cfg)

	if len(ret) == 0 {
		panic("no return value specified for LimitByUUID")
	}

	var r0 gin.HandlerFunc
	if rf, ok := ret.Get(0).(func(*ratelimiter.RateLimiterConfig) gin.HandlerFunc); ok {
		r0 = rf(cfg)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gin.HandlerFunc)
		}
	}

	return r0
}

// RateLimiterHttpMiddleware_LimitByUUID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LimitByUUID'
type RateLimiterHttpMiddleware_LimitByUUID_Call struct {
	*mock.Call
}

// LimitByUUID is a helper method to define mock.On call
//   - cfg *ratelimiter.RateLimiterConfig
func (_e *RateLimiterHttpMiddleware_Expecter) LimitByUUID(cfg interface{}) *RateLimiterHttpMiddleware_LimitByUUID_Call {
	return &RateLimiterHttpMiddleware_LimitByUUID_Call{Call: _e.mock.On("LimitByUUID", cfg)}
}

func (_c *RateLimiterHttpMiddleware_LimitByUUID_Call) Run(run func(cfg *ratelimiter.RateLimiterConfig)) *RateLimiterHttpMiddleware_LimitByUUID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*ratelimiter.RateLimiterConfig))
	})
	return _c
}

func (_c *RateLimiterHttpMiddleware_LimitByUUID_Call) Return(_a0 gin.HandlerFunc) *RateLimiterHttpMiddleware_LimitByUUID_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RateLimiterHttpMiddleware_LimitByUUID_Call) RunAndReturn(run func(*ratelimiter.RateLimiterConfig) gin.HandlerFunc) *RateLimiterHttpMiddleware_LimitByUUID_Call {
	_c.Call.Return(run)
	return _c
}

// NewRateLimiterHttpMiddleware creates a new instance of RateLimiterHttpMiddleware. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRateLimiterHttpMiddleware(t interface {
	mock.TestingT
	Cleanup(func())
}) *RateLimiterHttpMiddleware {
	mock := &RateLimiterHttpMiddleware{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
