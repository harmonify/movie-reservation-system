// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	kafka "github.com/harmonify/movie-reservation-system/pkg/kafka"
	mock "github.com/stretchr/testify/mock"

	sarama "github.com/IBM/sarama"
)

// MessageListener is an autogenerated mock type for the MessageListener type
type MessageListener struct {
	mock.Mock
}

type MessageListener_Expecter struct {
	mock *mock.Mock
}

func (_m *MessageListener) EXPECT() *MessageListener_Expecter {
	return &MessageListener_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with given fields:
func (_m *MessageListener) Close() {
	_m.Called()
}

// MessageListener_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MessageListener_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MessageListener_Expecter) Close() *MessageListener_Close_Call {
	return &MessageListener_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MessageListener_Close_Call) Run(run func()) *MessageListener_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MessageListener_Close_Call) Return() *MessageListener_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MessageListener_Close_Call) RunAndReturn(run func()) *MessageListener_Close_Call {
	_c.Call.Return(run)
	return _c
}

// Messages provides a mock function with given fields:
func (_m *MessageListener) Messages() <-chan *kafka.ChanneledMessage {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Messages")
	}

	var r0 <-chan *kafka.ChanneledMessage
	if rf, ok := ret.Get(0).(func() <-chan *kafka.ChanneledMessage); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan *kafka.ChanneledMessage)
		}
	}

	return r0
}

// MessageListener_Messages_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Messages'
type MessageListener_Messages_Call struct {
	*mock.Call
}

// Messages is a helper method to define mock.On call
func (_e *MessageListener_Expecter) Messages() *MessageListener_Messages_Call {
	return &MessageListener_Messages_Call{Call: _e.mock.On("Messages")}
}

func (_c *MessageListener_Messages_Call) Run(run func()) *MessageListener_Messages_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MessageListener_Messages_Call) Return(_a0 <-chan *kafka.ChanneledMessage) *MessageListener_Messages_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MessageListener_Messages_Call) RunAndReturn(run func() <-chan *kafka.ChanneledMessage) *MessageListener_Messages_Call {
	_c.Call.Return(run)
	return _c
}

// OnMessage provides a mock function with given fields: ctx, message
func (_m *MessageListener) OnMessage(ctx context.Context, message *sarama.ConsumerMessage) {
	_m.Called(ctx, message)
}

// MessageListener_OnMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'OnMessage'
type MessageListener_OnMessage_Call struct {
	*mock.Call
}

// OnMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - message *sarama.ConsumerMessage
func (_e *MessageListener_Expecter) OnMessage(ctx interface{}, message interface{}) *MessageListener_OnMessage_Call {
	return &MessageListener_OnMessage_Call{Call: _e.mock.On("OnMessage", ctx, message)}
}

func (_c *MessageListener_OnMessage_Call) Run(run func(ctx context.Context, message *sarama.ConsumerMessage)) *MessageListener_OnMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*sarama.ConsumerMessage))
	})
	return _c
}

func (_c *MessageListener_OnMessage_Call) Return() *MessageListener_OnMessage_Call {
	_c.Call.Return()
	return _c
}

func (_c *MessageListener_OnMessage_Call) RunAndReturn(run func(context.Context, *sarama.ConsumerMessage)) *MessageListener_OnMessage_Call {
	_c.Call.Return(run)
	return _c
}

// NewMessageListener creates a new instance of MessageListener. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessageListener(t interface {
	mock.TestingT
	Cleanup(func())
}) *MessageListener {
	mock := &MessageListener{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
