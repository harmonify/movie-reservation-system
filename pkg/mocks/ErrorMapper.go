// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	error_pkg "github.com/harmonify/movie-reservation-system/pkg/error"
	mock "github.com/stretchr/testify/mock"
)

// ErrorMapper is an autogenerated mock type for the ErrorMapper type
type ErrorMapper struct {
	mock.Mock
}

type ErrorMapper_Expecter struct {
	mock *mock.Mock
}

func (_m *ErrorMapper) EXPECT() *ErrorMapper_Expecter {
	return &ErrorMapper_Expecter{mock: &_m.Mock}
}

// FromCode provides a mock function with given fields: code
func (_m *ErrorMapper) FromCode(code error_pkg.ErrorCode) (*error_pkg.ErrorWithDetails, bool) {
	ret := _m.Called(code)

	if len(ret) == 0 {
		panic("no return value specified for FromCode")
	}

	var r0 *error_pkg.ErrorWithDetails
	var r1 bool
	if rf, ok := ret.Get(0).(func(error_pkg.ErrorCode) (*error_pkg.ErrorWithDetails, bool)); ok {
		return rf(code)
	}
	if rf, ok := ret.Get(0).(func(error_pkg.ErrorCode) *error_pkg.ErrorWithDetails); ok {
		r0 = rf(code)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*error_pkg.ErrorWithDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(error_pkg.ErrorCode) bool); ok {
		r1 = rf(code)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// ErrorMapper_FromCode_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FromCode'
type ErrorMapper_FromCode_Call struct {
	*mock.Call
}

// FromCode is a helper method to define mock.On call
//   - code error_pkg.ErrorCode
func (_e *ErrorMapper_Expecter) FromCode(code interface{}) *ErrorMapper_FromCode_Call {
	return &ErrorMapper_FromCode_Call{Call: _e.mock.On("FromCode", code)}
}

func (_c *ErrorMapper_FromCode_Call) Run(run func(code error_pkg.ErrorCode)) *ErrorMapper_FromCode_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error_pkg.ErrorCode))
	})
	return _c
}

func (_c *ErrorMapper_FromCode_Call) Return(err *error_pkg.ErrorWithDetails, found bool) *ErrorMapper_FromCode_Call {
	_c.Call.Return(err, found)
	return _c
}

func (_c *ErrorMapper_FromCode_Call) RunAndReturn(run func(error_pkg.ErrorCode) (*error_pkg.ErrorWithDetails, bool)) *ErrorMapper_FromCode_Call {
	_c.Call.Return(run)
	return _c
}

// FromError provides a mock function with given fields: original
func (_m *ErrorMapper) FromError(original error) (*error_pkg.ErrorWithDetails, bool) {
	ret := _m.Called(original)

	if len(ret) == 0 {
		panic("no return value specified for FromError")
	}

	var r0 *error_pkg.ErrorWithDetails
	var r1 bool
	if rf, ok := ret.Get(0).(func(error) (*error_pkg.ErrorWithDetails, bool)); ok {
		return rf(original)
	}
	if rf, ok := ret.Get(0).(func(error) *error_pkg.ErrorWithDetails); ok {
		r0 = rf(original)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*error_pkg.ErrorWithDetails)
		}
	}

	if rf, ok := ret.Get(1).(func(error) bool); ok {
		r1 = rf(original)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// ErrorMapper_FromError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FromError'
type ErrorMapper_FromError_Call struct {
	*mock.Call
}

// FromError is a helper method to define mock.On call
//   - original error
func (_e *ErrorMapper_Expecter) FromError(original interface{}) *ErrorMapper_FromError_Call {
	return &ErrorMapper_FromError_Call{Call: _e.mock.On("FromError", original)}
}

func (_c *ErrorMapper_FromError_Call) Run(run func(original error)) *ErrorMapper_FromError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *ErrorMapper_FromError_Call) Return(err *error_pkg.ErrorWithDetails, valid bool) *ErrorMapper_FromError_Call {
	_c.Call.Return(err, valid)
	return _c
}

func (_c *ErrorMapper_FromError_Call) RunAndReturn(run func(error) (*error_pkg.ErrorWithDetails, bool)) *ErrorMapper_FromError_Call {
	_c.Call.Return(run)
	return _c
}

// RegisterErrors provides a mock function with given fields: errs
func (_m *ErrorMapper) RegisterErrors(errs ...*error_pkg.ErrorWithDetails) {
	_va := make([]interface{}, len(errs))
	for _i := range errs {
		_va[_i] = errs[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, _va...)
	_m.Called(_ca...)
}

// ErrorMapper_RegisterErrors_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegisterErrors'
type ErrorMapper_RegisterErrors_Call struct {
	*mock.Call
}

// RegisterErrors is a helper method to define mock.On call
//   - errs ...*error_pkg.ErrorWithDetails
func (_e *ErrorMapper_Expecter) RegisterErrors(errs ...interface{}) *ErrorMapper_RegisterErrors_Call {
	return &ErrorMapper_RegisterErrors_Call{Call: _e.mock.On("RegisterErrors",
		append([]interface{}{}, errs...)...)}
}

func (_c *ErrorMapper_RegisterErrors_Call) Run(run func(errs ...*error_pkg.ErrorWithDetails)) *ErrorMapper_RegisterErrors_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]*error_pkg.ErrorWithDetails, len(args)-0)
		for i, a := range args[0:] {
			if a != nil {
				variadicArgs[i] = a.(*error_pkg.ErrorWithDetails)
			}
		}
		run(variadicArgs...)
	})
	return _c
}

func (_c *ErrorMapper_RegisterErrors_Call) Return() *ErrorMapper_RegisterErrors_Call {
	_c.Call.Return()
	return _c
}

func (_c *ErrorMapper_RegisterErrors_Call) RunAndReturn(run func(...*error_pkg.ErrorWithDetails)) *ErrorMapper_RegisterErrors_Call {
	_c.Call.Return(run)
	return _c
}

// ToGrpcError provides a mock function with given fields: err
func (_m *ErrorMapper) ToGrpcError(err error) error {
	ret := _m.Called(err)

	if len(ret) == 0 {
		panic("no return value specified for ToGrpcError")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(error) error); ok {
		r0 = rf(err)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ErrorMapper_ToGrpcError_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ToGrpcError'
type ErrorMapper_ToGrpcError_Call struct {
	*mock.Call
}

// ToGrpcError is a helper method to define mock.On call
//   - err error
func (_e *ErrorMapper_Expecter) ToGrpcError(err interface{}) *ErrorMapper_ToGrpcError_Call {
	return &ErrorMapper_ToGrpcError_Call{Call: _e.mock.On("ToGrpcError", err)}
}

func (_c *ErrorMapper_ToGrpcError_Call) Run(run func(err error)) *ErrorMapper_ToGrpcError_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(error))
	})
	return _c
}

func (_c *ErrorMapper_ToGrpcError_Call) Return(_a0 error) *ErrorMapper_ToGrpcError_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ErrorMapper_ToGrpcError_Call) RunAndReturn(run func(error) error) *ErrorMapper_ToGrpcError_Call {
	_c.Call.Return(run)
	return _c
}

// NewErrorMapper creates a new instance of ErrorMapper. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewErrorMapper(t interface {
	mock.TestingT
	Cleanup(func())
}) *ErrorMapper {
	mock := &ErrorMapper{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
