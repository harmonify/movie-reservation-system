// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"
)

// RestHandler is an autogenerated mock type for the RestHandler type
type RestHandler struct {
	mock.Mock
}

type RestHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *RestHandler) EXPECT() *RestHandler_Expecter {
	return &RestHandler_Expecter{mock: &_m.Mock}
}

// Register provides a mock function with given fields: g
func (_m *RestHandler) Register(g *gin.RouterGroup) {
	_m.Called(g)
}

// RestHandler_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type RestHandler_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - g *gin.RouterGroup
func (_e *RestHandler_Expecter) Register(g interface{}) *RestHandler_Register_Call {
	return &RestHandler_Register_Call{Call: _e.mock.On("Register", g)}
}

func (_c *RestHandler_Register_Call) Run(run func(g *gin.RouterGroup)) *RestHandler_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.RouterGroup))
	})
	return _c
}

func (_c *RestHandler_Register_Call) Return() *RestHandler_Register_Call {
	_c.Call.Return()
	return _c
}

func (_c *RestHandler_Register_Call) RunAndReturn(run func(*gin.RouterGroup)) *RestHandler_Register_Call {
	_c.Call.Return(run)
	return _c
}

// Version provides a mock function with given fields:
func (_m *RestHandler) Version() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Version")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// RestHandler_Version_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Version'
type RestHandler_Version_Call struct {
	*mock.Call
}

// Version is a helper method to define mock.On call
func (_e *RestHandler_Expecter) Version() *RestHandler_Version_Call {
	return &RestHandler_Version_Call{Call: _e.mock.On("Version")}
}

func (_c *RestHandler_Version_Call) Run(run func()) *RestHandler_Version_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RestHandler_Version_Call) Return(_a0 string) *RestHandler_Version_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RestHandler_Version_Call) RunAndReturn(run func() string) *RestHandler_Version_Call {
	_c.Call.Return(run)
	return _c
}

// NewRestHandler creates a new instance of RestHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRestHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *RestHandler {
	mock := &RestHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
