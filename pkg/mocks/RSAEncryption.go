// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	encryption "github.com/harmonify/movie-reservation-system/pkg/util/encryption"
	mock "github.com/stretchr/testify/mock"

	rsa "crypto/rsa"
)

// RSAEncryption is an autogenerated mock type for the RSAEncryption type
type RSAEncryption struct {
	mock.Mock
}

type RSAEncryption_Expecter struct {
	mock *mock.Mock
}

func (_m *RSAEncryption) EXPECT() *RSAEncryption_Expecter {
	return &RSAEncryption_Expecter{mock: &_m.Mock}
}

// EncodePrivateKey provides a mock function with given fields: privateKey
func (_m *RSAEncryption) EncodePrivateKey(privateKey *rsa.PrivateKey) []byte {
	ret := _m.Called(privateKey)

	if len(ret) == 0 {
		panic("no return value specified for EncodePrivateKey")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func(*rsa.PrivateKey) []byte); ok {
		r0 = rf(privateKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// RSAEncryption_EncodePrivateKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EncodePrivateKey'
type RSAEncryption_EncodePrivateKey_Call struct {
	*mock.Call
}

// EncodePrivateKey is a helper method to define mock.On call
//   - privateKey *rsa.PrivateKey
func (_e *RSAEncryption_Expecter) EncodePrivateKey(privateKey interface{}) *RSAEncryption_EncodePrivateKey_Call {
	return &RSAEncryption_EncodePrivateKey_Call{Call: _e.mock.On("EncodePrivateKey", privateKey)}
}

func (_c *RSAEncryption_EncodePrivateKey_Call) Run(run func(privateKey *rsa.PrivateKey)) *RSAEncryption_EncodePrivateKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*rsa.PrivateKey))
	})
	return _c
}

func (_c *RSAEncryption_EncodePrivateKey_Call) Return(_a0 []byte) *RSAEncryption_EncodePrivateKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RSAEncryption_EncodePrivateKey_Call) RunAndReturn(run func(*rsa.PrivateKey) []byte) *RSAEncryption_EncodePrivateKey_Call {
	_c.Call.Return(run)
	return _c
}

// EncodePublicKey provides a mock function with given fields: publicKey
func (_m *RSAEncryption) EncodePublicKey(publicKey *rsa.PublicKey) []byte {
	ret := _m.Called(publicKey)

	if len(ret) == 0 {
		panic("no return value specified for EncodePublicKey")
	}

	var r0 []byte
	if rf, ok := ret.Get(0).(func(*rsa.PublicKey) []byte); ok {
		r0 = rf(publicKey)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	return r0
}

// RSAEncryption_EncodePublicKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'EncodePublicKey'
type RSAEncryption_EncodePublicKey_Call struct {
	*mock.Call
}

// EncodePublicKey is a helper method to define mock.On call
//   - publicKey *rsa.PublicKey
func (_e *RSAEncryption_Expecter) EncodePublicKey(publicKey interface{}) *RSAEncryption_EncodePublicKey_Call {
	return &RSAEncryption_EncodePublicKey_Call{Call: _e.mock.On("EncodePublicKey", publicKey)}
}

func (_c *RSAEncryption_EncodePublicKey_Call) Run(run func(publicKey *rsa.PublicKey)) *RSAEncryption_EncodePublicKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*rsa.PublicKey))
	})
	return _c
}

func (_c *RSAEncryption_EncodePublicKey_Call) Return(_a0 []byte) *RSAEncryption_EncodePublicKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RSAEncryption_EncodePublicKey_Call) RunAndReturn(run func(*rsa.PublicKey) []byte) *RSAEncryption_EncodePublicKey_Call {
	_c.Call.Return(run)
	return _c
}

// Generate provides a mock function with given fields:
func (_m *RSAEncryption) Generate() (encryption.RSAKeyPair, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Generate")
	}

	var r0 encryption.RSAKeyPair
	var r1 error
	if rf, ok := ret.Get(0).(func() (encryption.RSAKeyPair, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() encryption.RSAKeyPair); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(encryption.RSAKeyPair)
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RSAEncryption_Generate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Generate'
type RSAEncryption_Generate_Call struct {
	*mock.Call
}

// Generate is a helper method to define mock.On call
func (_e *RSAEncryption_Expecter) Generate() *RSAEncryption_Generate_Call {
	return &RSAEncryption_Generate_Call{Call: _e.mock.On("Generate")}
}

func (_c *RSAEncryption_Generate_Call) Run(run func()) *RSAEncryption_Generate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *RSAEncryption_Generate_Call) Return(_a0 encryption.RSAKeyPair, _a1 error) *RSAEncryption_Generate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RSAEncryption_Generate_Call) RunAndReturn(run func() (encryption.RSAKeyPair, error)) *RSAEncryption_Generate_Call {
	_c.Call.Return(run)
	return _c
}

// NewRSAEncryption creates a new instance of RSAEncryption. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRSAEncryption(t interface {
	mock.TestingT
	Cleanup(func())
}) *RSAEncryption {
	mock := &RSAEncryption{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
