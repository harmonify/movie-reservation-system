// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	bson "go.mongodb.org/mongo-driver/v2/bson"

	mock "github.com/stretchr/testify/mock"
)

// MongoStructUtil is an autogenerated mock type for the MongoStructUtil type
type MongoStructUtil struct {
	mock.Mock
}

type MongoStructUtil_Expecter struct {
	mock *mock.Mock
}

func (_m *MongoStructUtil) EXPECT() *MongoStructUtil_Expecter {
	return &MongoStructUtil_Expecter{mock: &_m.Mock}
}

// ConvertStructToBsonDocument provides a mock function with given fields: ctx, input, prefix
func (_m *MongoStructUtil) ConvertStructToBsonDocument(ctx context.Context, input interface{}, prefix ...string) (bson.D, error) {
	_va := make([]interface{}, len(prefix))
	for _i := range prefix {
		_va[_i] = prefix[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, input)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for ConvertStructToBsonDocument")
	}

	var r0 bson.D
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...string) (bson.D, error)); ok {
		return rf(ctx, input, prefix...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, interface{}, ...string) bson.D); ok {
		r0 = rf(ctx, input, prefix...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(bson.D)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, interface{}, ...string) error); ok {
		r1 = rf(ctx, input, prefix...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MongoStructUtil_ConvertStructToBsonDocument_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConvertStructToBsonDocument'
type MongoStructUtil_ConvertStructToBsonDocument_Call struct {
	*mock.Call
}

// ConvertStructToBsonDocument is a helper method to define mock.On call
//   - ctx context.Context
//   - input interface{}
//   - prefix ...string
func (_e *MongoStructUtil_Expecter) ConvertStructToBsonDocument(ctx interface{}, input interface{}, prefix ...interface{}) *MongoStructUtil_ConvertStructToBsonDocument_Call {
	return &MongoStructUtil_ConvertStructToBsonDocument_Call{Call: _e.mock.On("ConvertStructToBsonDocument",
		append([]interface{}{ctx, input}, prefix...)...)}
}

func (_c *MongoStructUtil_ConvertStructToBsonDocument_Call) Run(run func(ctx context.Context, input interface{}, prefix ...string)) *MongoStructUtil_ConvertStructToBsonDocument_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]string, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(string)
			}
		}
		run(args[0].(context.Context), args[1].(interface{}), variadicArgs...)
	})
	return _c
}

func (_c *MongoStructUtil_ConvertStructToBsonDocument_Call) Return(result bson.D, err error) *MongoStructUtil_ConvertStructToBsonDocument_Call {
	_c.Call.Return(result, err)
	return _c
}

func (_c *MongoStructUtil_ConvertStructToBsonDocument_Call) RunAndReturn(run func(context.Context, interface{}, ...string) (bson.D, error)) *MongoStructUtil_ConvertStructToBsonDocument_Call {
	_c.Call.Return(run)
	return _c
}

// NewMongoStructUtil creates a new instance of MongoStructUtil. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMongoStructUtil(t interface {
	mock.TestingT
	Cleanup(func())
}) *MongoStructUtil {
	mock := &MongoStructUtil{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
