// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// GeneratorUtil is an autogenerated mock type for the GeneratorUtil type
type GeneratorUtil struct {
	mock.Mock
}

type GeneratorUtil_Expecter struct {
	mock *mock.Mock
}

func (_m *GeneratorUtil) EXPECT() *GeneratorUtil_Expecter {
	return &GeneratorUtil_Expecter{mock: &_m.Mock}
}

// GenerateRandomBase64 provides a mock function with given fields: n
func (_m *GeneratorUtil) GenerateRandomBase64(n uint32) (string, error) {
	ret := _m.Called(n)

	if len(ret) == 0 {
		panic("no return value specified for GenerateRandomBase64")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(uint32) (string, error)); ok {
		return rf(n)
	}
	if rf, ok := ret.Get(0).(func(uint32) string); ok {
		r0 = rf(n)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(uint32) error); ok {
		r1 = rf(n)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GeneratorUtil_GenerateRandomBase64_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateRandomBase64'
type GeneratorUtil_GenerateRandomBase64_Call struct {
	*mock.Call
}

// GenerateRandomBase64 is a helper method to define mock.On call
//   - n uint32
func (_e *GeneratorUtil_Expecter) GenerateRandomBase64(n interface{}) *GeneratorUtil_GenerateRandomBase64_Call {
	return &GeneratorUtil_GenerateRandomBase64_Call{Call: _e.mock.On("GenerateRandomBase64", n)}
}

func (_c *GeneratorUtil_GenerateRandomBase64_Call) Run(run func(n uint32)) *GeneratorUtil_GenerateRandomBase64_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint32))
	})
	return _c
}

func (_c *GeneratorUtil_GenerateRandomBase64_Call) Return(_a0 string, _a1 error) *GeneratorUtil_GenerateRandomBase64_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GeneratorUtil_GenerateRandomBase64_Call) RunAndReturn(run func(uint32) (string, error)) *GeneratorUtil_GenerateRandomBase64_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateRandomBytes provides a mock function with given fields: n
func (_m *GeneratorUtil) GenerateRandomBytes(n uint32) ([]byte, error) {
	ret := _m.Called(n)

	if len(ret) == 0 {
		panic("no return value specified for GenerateRandomBytes")
	}

	var r0 []byte
	var r1 error
	if rf, ok := ret.Get(0).(func(uint32) ([]byte, error)); ok {
		return rf(n)
	}
	if rf, ok := ret.Get(0).(func(uint32) []byte); ok {
		r0 = rf(n)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]byte)
		}
	}

	if rf, ok := ret.Get(1).(func(uint32) error); ok {
		r1 = rf(n)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GeneratorUtil_GenerateRandomBytes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateRandomBytes'
type GeneratorUtil_GenerateRandomBytes_Call struct {
	*mock.Call
}

// GenerateRandomBytes is a helper method to define mock.On call
//   - n uint32
func (_e *GeneratorUtil_Expecter) GenerateRandomBytes(n interface{}) *GeneratorUtil_GenerateRandomBytes_Call {
	return &GeneratorUtil_GenerateRandomBytes_Call{Call: _e.mock.On("GenerateRandomBytes", n)}
}

func (_c *GeneratorUtil_GenerateRandomBytes_Call) Run(run func(n uint32)) *GeneratorUtil_GenerateRandomBytes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint32))
	})
	return _c
}

func (_c *GeneratorUtil_GenerateRandomBytes_Call) Return(_a0 []byte, _a1 error) *GeneratorUtil_GenerateRandomBytes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GeneratorUtil_GenerateRandomBytes_Call) RunAndReturn(run func(uint32) ([]byte, error)) *GeneratorUtil_GenerateRandomBytes_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateRandomHex provides a mock function with given fields: n
func (_m *GeneratorUtil) GenerateRandomHex(n uint32) (string, error) {
	ret := _m.Called(n)

	if len(ret) == 0 {
		panic("no return value specified for GenerateRandomHex")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(uint32) (string, error)); ok {
		return rf(n)
	}
	if rf, ok := ret.Get(0).(func(uint32) string); ok {
		r0 = rf(n)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(uint32) error); ok {
		r1 = rf(n)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GeneratorUtil_GenerateRandomHex_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateRandomHex'
type GeneratorUtil_GenerateRandomHex_Call struct {
	*mock.Call
}

// GenerateRandomHex is a helper method to define mock.On call
//   - n uint32
func (_e *GeneratorUtil_Expecter) GenerateRandomHex(n interface{}) *GeneratorUtil_GenerateRandomHex_Call {
	return &GeneratorUtil_GenerateRandomHex_Call{Call: _e.mock.On("GenerateRandomHex", n)}
}

func (_c *GeneratorUtil_GenerateRandomHex_Call) Run(run func(n uint32)) *GeneratorUtil_GenerateRandomHex_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint32))
	})
	return _c
}

func (_c *GeneratorUtil_GenerateRandomHex_Call) Return(_a0 string, _a1 error) *GeneratorUtil_GenerateRandomHex_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GeneratorUtil_GenerateRandomHex_Call) RunAndReturn(run func(uint32) (string, error)) *GeneratorUtil_GenerateRandomHex_Call {
	_c.Call.Return(run)
	return _c
}

// GenerateRandomNumber provides a mock function with given fields: length
func (_m *GeneratorUtil) GenerateRandomNumber(length uint32) (string, error) {
	ret := _m.Called(length)

	if len(ret) == 0 {
		panic("no return value specified for GenerateRandomNumber")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(uint32) (string, error)); ok {
		return rf(length)
	}
	if rf, ok := ret.Get(0).(func(uint32) string); ok {
		r0 = rf(length)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(uint32) error); ok {
		r1 = rf(length)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GeneratorUtil_GenerateRandomNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateRandomNumber'
type GeneratorUtil_GenerateRandomNumber_Call struct {
	*mock.Call
}

// GenerateRandomNumber is a helper method to define mock.On call
//   - length uint32
func (_e *GeneratorUtil_Expecter) GenerateRandomNumber(length interface{}) *GeneratorUtil_GenerateRandomNumber_Call {
	return &GeneratorUtil_GenerateRandomNumber_Call{Call: _e.mock.On("GenerateRandomNumber", length)}
}

func (_c *GeneratorUtil_GenerateRandomNumber_Call) Run(run func(length uint32)) *GeneratorUtil_GenerateRandomNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(uint32))
	})
	return _c
}

func (_c *GeneratorUtil_GenerateRandomNumber_Call) Return(_a0 string, _a1 error) *GeneratorUtil_GenerateRandomNumber_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *GeneratorUtil_GenerateRandomNumber_Call) RunAndReturn(run func(uint32) (string, error)) *GeneratorUtil_GenerateRandomNumber_Call {
	_c.Call.Return(run)
	return _c
}

// NewGeneratorUtil creates a new instance of GeneratorUtil. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewGeneratorUtil(t interface {
	mock.TestingT
	Cleanup(func())
}) *GeneratorUtil {
	mock := &GeneratorUtil{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
