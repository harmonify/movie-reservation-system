// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	propagation "go.opentelemetry.io/otel/propagation"

	trace "go.opentelemetry.io/otel/trace"
)

// Tracer is an autogenerated mock type for the Tracer type
type Tracer struct {
	mock.Mock
}

type Tracer_Expecter struct {
	mock *mock.Mock
}

func (_m *Tracer) EXPECT() *Tracer_Expecter {
	return &Tracer_Expecter{mock: &_m.Mock}
}

// Extract provides a mock function with given fields: ctx, carrier
func (_m *Tracer) Extract(ctx context.Context, carrier propagation.TextMapCarrier) context.Context {
	ret := _m.Called(ctx, carrier)

	if len(ret) == 0 {
		panic("no return value specified for Extract")
	}

	var r0 context.Context
	if rf, ok := ret.Get(0).(func(context.Context, propagation.TextMapCarrier) context.Context); ok {
		r0 = rf(ctx, carrier)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	return r0
}

// Tracer_Extract_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Extract'
type Tracer_Extract_Call struct {
	*mock.Call
}

// Extract is a helper method to define mock.On call
//   - ctx context.Context
//   - carrier propagation.TextMapCarrier
func (_e *Tracer_Expecter) Extract(ctx interface{}, carrier interface{}) *Tracer_Extract_Call {
	return &Tracer_Extract_Call{Call: _e.mock.On("Extract", ctx, carrier)}
}

func (_c *Tracer_Extract_Call) Run(run func(ctx context.Context, carrier propagation.TextMapCarrier)) *Tracer_Extract_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(propagation.TextMapCarrier))
	})
	return _c
}

func (_c *Tracer_Extract_Call) Return(_a0 context.Context) *Tracer_Extract_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Tracer_Extract_Call) RunAndReturn(run func(context.Context, propagation.TextMapCarrier) context.Context) *Tracer_Extract_Call {
	_c.Call.Return(run)
	return _c
}

// Inject provides a mock function with given fields: ctx, carrier
func (_m *Tracer) Inject(ctx context.Context, carrier propagation.TextMapCarrier) {
	_m.Called(ctx, carrier)
}

// Tracer_Inject_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Inject'
type Tracer_Inject_Call struct {
	*mock.Call
}

// Inject is a helper method to define mock.On call
//   - ctx context.Context
//   - carrier propagation.TextMapCarrier
func (_e *Tracer_Expecter) Inject(ctx interface{}, carrier interface{}) *Tracer_Inject_Call {
	return &Tracer_Inject_Call{Call: _e.mock.On("Inject", ctx, carrier)}
}

func (_c *Tracer_Inject_Call) Run(run func(ctx context.Context, carrier propagation.TextMapCarrier)) *Tracer_Inject_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(propagation.TextMapCarrier))
	})
	return _c
}

func (_c *Tracer_Inject_Call) Return() *Tracer_Inject_Call {
	_c.Call.Return()
	return _c
}

func (_c *Tracer_Inject_Call) RunAndReturn(run func(context.Context, propagation.TextMapCarrier)) *Tracer_Inject_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with given fields: ctx, spanName
func (_m *Tracer) Start(ctx context.Context, spanName string) (context.Context, trace.Span) {
	ret := _m.Called(ctx, spanName)

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 context.Context
	var r1 trace.Span
	if rf, ok := ret.Get(0).(func(context.Context, string) (context.Context, trace.Span)); ok {
		return rf(ctx, spanName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) context.Context); ok {
		r0 = rf(ctx, spanName)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) trace.Span); ok {
		r1 = rf(ctx, spanName)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(trace.Span)
		}
	}

	return r0, r1
}

// Tracer_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type Tracer_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
//   - ctx context.Context
//   - spanName string
func (_e *Tracer_Expecter) Start(ctx interface{}, spanName interface{}) *Tracer_Start_Call {
	return &Tracer_Start_Call{Call: _e.mock.On("Start", ctx, spanName)}
}

func (_c *Tracer_Start_Call) Run(run func(ctx context.Context, spanName string)) *Tracer_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Tracer_Start_Call) Return(_a0 context.Context, _a1 trace.Span) *Tracer_Start_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Tracer_Start_Call) RunAndReturn(run func(context.Context, string) (context.Context, trace.Span)) *Tracer_Start_Call {
	_c.Call.Return(run)
	return _c
}

// StartSpanWithCaller provides a mock function with given fields: ctx
func (_m *Tracer) StartSpanWithCaller(ctx context.Context) (context.Context, trace.Span) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for StartSpanWithCaller")
	}

	var r0 context.Context
	var r1 trace.Span
	if rf, ok := ret.Get(0).(func(context.Context) (context.Context, trace.Span)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) context.Context); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(context.Context)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) trace.Span); ok {
		r1 = rf(ctx)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(trace.Span)
		}
	}

	return r0, r1
}

// Tracer_StartSpanWithCaller_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StartSpanWithCaller'
type Tracer_StartSpanWithCaller_Call struct {
	*mock.Call
}

// StartSpanWithCaller is a helper method to define mock.On call
//   - ctx context.Context
func (_e *Tracer_Expecter) StartSpanWithCaller(ctx interface{}) *Tracer_StartSpanWithCaller_Call {
	return &Tracer_StartSpanWithCaller_Call{Call: _e.mock.On("StartSpanWithCaller", ctx)}
}

func (_c *Tracer_StartSpanWithCaller_Call) Run(run func(ctx context.Context)) *Tracer_StartSpanWithCaller_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *Tracer_StartSpanWithCaller_Call) Return(_a0 context.Context, _a1 trace.Span) *Tracer_StartSpanWithCaller_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *Tracer_StartSpanWithCaller_Call) RunAndReturn(run func(context.Context) (context.Context, trace.Span)) *Tracer_StartSpanWithCaller_Call {
	_c.Call.Return(run)
	return _c
}

// NewTracer creates a new instance of Tracer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTracer(t interface {
	mock.TestingT
	Cleanup(func())
}) *Tracer {
	mock := &Tracer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
