// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"

	time "time"
)

// RateLimiter is an autogenerated mock type for the RateLimiter type
type RateLimiter struct {
	mock.Mock
}

type RateLimiter_Expecter struct {
	mock *mock.Mock
}

func (_m *RateLimiter) EXPECT() *RateLimiter_Expecter {
	return &RateLimiter_Expecter{mock: &_m.Mock}
}

// Limit provides a mock function with given fields: ctx
func (_m *RateLimiter) Limit(ctx context.Context) (time.Duration, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Limit")
	}

	var r0 time.Duration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (time.Duration, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) time.Duration); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RateLimiter_Limit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Limit'
type RateLimiter_Limit_Call struct {
	*mock.Call
}

// Limit is a helper method to define mock.On call
//   - ctx context.Context
func (_e *RateLimiter_Expecter) Limit(ctx interface{}) *RateLimiter_Limit_Call {
	return &RateLimiter_Limit_Call{Call: _e.mock.On("Limit", ctx)}
}

func (_c *RateLimiter_Limit_Call) Run(run func(ctx context.Context)) *RateLimiter_Limit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *RateLimiter_Limit_Call) Return(retryAfter time.Duration, err error) *RateLimiter_Limit_Call {
	_c.Call.Return(retryAfter, err)
	return _c
}

func (_c *RateLimiter_Limit_Call) RunAndReturn(run func(context.Context) (time.Duration, error)) *RateLimiter_Limit_Call {
	_c.Call.Return(run)
	return _c
}

// Reset provides a mock function with given fields: ctx
func (_m *RateLimiter) Reset(ctx context.Context) error {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Reset")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context) error); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// RateLimiter_Reset_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Reset'
type RateLimiter_Reset_Call struct {
	*mock.Call
}

// Reset is a helper method to define mock.On call
//   - ctx context.Context
func (_e *RateLimiter_Expecter) Reset(ctx interface{}) *RateLimiter_Reset_Call {
	return &RateLimiter_Reset_Call{Call: _e.mock.On("Reset", ctx)}
}

func (_c *RateLimiter_Reset_Call) Run(run func(ctx context.Context)) *RateLimiter_Reset_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *RateLimiter_Reset_Call) Return(_a0 error) *RateLimiter_Reset_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RateLimiter_Reset_Call) RunAndReturn(run func(context.Context) error) *RateLimiter_Reset_Call {
	_c.Call.Return(run)
	return _c
}

// Take provides a mock function with given fields: ctx, tokens
func (_m *RateLimiter) Take(ctx context.Context, tokens int64) (time.Duration, error) {
	ret := _m.Called(ctx, tokens)

	if len(ret) == 0 {
		panic("no return value specified for Take")
	}

	var r0 time.Duration
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int64) (time.Duration, error)); ok {
		return rf(ctx, tokens)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int64) time.Duration); ok {
		r0 = rf(ctx, tokens)
	} else {
		r0 = ret.Get(0).(time.Duration)
	}

	if rf, ok := ret.Get(1).(func(context.Context, int64) error); ok {
		r1 = rf(ctx, tokens)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RateLimiter_Take_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Take'
type RateLimiter_Take_Call struct {
	*mock.Call
}

// Take is a helper method to define mock.On call
//   - ctx context.Context
//   - tokens int64
func (_e *RateLimiter_Expecter) Take(ctx interface{}, tokens interface{}) *RateLimiter_Take_Call {
	return &RateLimiter_Take_Call{Call: _e.mock.On("Take", ctx, tokens)}
}

func (_c *RateLimiter_Take_Call) Run(run func(ctx context.Context, tokens int64)) *RateLimiter_Take_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(int64))
	})
	return _c
}

func (_c *RateLimiter_Take_Call) Return(retryAfter time.Duration, err error) *RateLimiter_Take_Call {
	_c.Call.Return(retryAfter, err)
	return _c
}

func (_c *RateLimiter_Take_Call) RunAndReturn(run func(context.Context, int64) (time.Duration, error)) *RateLimiter_Take_Call {
	_c.Call.Return(run)
	return _c
}

// NewRateLimiter creates a new instance of RateLimiter. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRateLimiter(t interface {
	mock.TestingT
	Cleanup(func())
}) *RateLimiter {
	mock := &RateLimiter{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
