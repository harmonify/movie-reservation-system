// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	http_pkg "github.com/harmonify/movie-reservation-system/pkg/http"
	mock "github.com/stretchr/testify/mock"
)

// HttpResponseBuilder is an autogenerated mock type for the HttpResponseBuilder type
type HttpResponseBuilder struct {
	mock.Mock
}

type HttpResponseBuilder_Expecter struct {
	mock *mock.Mock
}

func (_m *HttpResponseBuilder) EXPECT() *HttpResponseBuilder_Expecter {
	return &HttpResponseBuilder_Expecter{mock: &_m.Mock}
}

// New provides a mock function with given fields:
func (_m *HttpResponseBuilder) New() http_pkg.HttpResponseV2 {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for New")
	}

	var r0 http_pkg.HttpResponseV2
	if rf, ok := ret.Get(0).(func() http_pkg.HttpResponseV2); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(http_pkg.HttpResponseV2)
		}
	}

	return r0
}

// HttpResponseBuilder_New_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'New'
type HttpResponseBuilder_New_Call struct {
	*mock.Call
}

// New is a helper method to define mock.On call
func (_e *HttpResponseBuilder_Expecter) New() *HttpResponseBuilder_New_Call {
	return &HttpResponseBuilder_New_Call{Call: _e.mock.On("New")}
}

func (_c *HttpResponseBuilder_New_Call) Run(run func()) *HttpResponseBuilder_New_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *HttpResponseBuilder_New_Call) Return(_a0 http_pkg.HttpResponseV2) *HttpResponseBuilder_New_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *HttpResponseBuilder_New_Call) RunAndReturn(run func() http_pkg.HttpResponseV2) *HttpResponseBuilder_New_Call {
	_c.Call.Return(run)
	return _c
}

// NewHttpResponseBuilder creates a new instance of HttpResponseBuilder. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewHttpResponseBuilder(t interface {
	mock.TestingT
	Cleanup(func())
}) *HttpResponseBuilder {
	mock := &HttpResponseBuilder{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
