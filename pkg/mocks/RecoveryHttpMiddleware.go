// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"
)

// RecoveryHttpMiddleware is an autogenerated mock type for the RecoveryHttpMiddleware type
type RecoveryHttpMiddleware struct {
	mock.Mock
}

type RecoveryHttpMiddleware_Expecter struct {
	mock *mock.Mock
}

func (_m *RecoveryHttpMiddleware) EXPECT() *RecoveryHttpMiddleware_Expecter {
	return &RecoveryHttpMiddleware_Expecter{mock: &_m.Mock}
}

// WithStack provides a mock function with given fields: stack
func (_m *RecoveryHttpMiddleware) WithStack(stack bool) gin.HandlerFunc {
	ret := _m.Called(stack)

	if len(ret) == 0 {
		panic("no return value specified for WithStack")
	}

	var r0 gin.HandlerFunc
	if rf, ok := ret.Get(0).(func(bool) gin.HandlerFunc); ok {
		r0 = rf(stack)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(gin.HandlerFunc)
		}
	}

	return r0
}

// RecoveryHttpMiddleware_WithStack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithStack'
type RecoveryHttpMiddleware_WithStack_Call struct {
	*mock.Call
}

// WithStack is a helper method to define mock.On call
//   - stack bool
func (_e *RecoveryHttpMiddleware_Expecter) WithStack(stack interface{}) *RecoveryHttpMiddleware_WithStack_Call {
	return &RecoveryHttpMiddleware_WithStack_Call{Call: _e.mock.On("WithStack", stack)}
}

func (_c *RecoveryHttpMiddleware_WithStack_Call) Run(run func(stack bool)) *RecoveryHttpMiddleware_WithStack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(bool))
	})
	return _c
}

func (_c *RecoveryHttpMiddleware_WithStack_Call) Return(_a0 gin.HandlerFunc) *RecoveryHttpMiddleware_WithStack_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RecoveryHttpMiddleware_WithStack_Call) RunAndReturn(run func(bool) gin.HandlerFunc) *RecoveryHttpMiddleware_WithStack_Call {
	_c.Call.Return(run)
	return _c
}

// NewRecoveryHttpMiddleware creates a new instance of RecoveryHttpMiddleware. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRecoveryHttpMiddleware(t interface {
	mock.TestingT
	Cleanup(func())
}) *RecoveryHttpMiddleware {
	mock := &RecoveryHttpMiddleware{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
