// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// StructUtil is an autogenerated mock type for the StructUtil type
type StructUtil struct {
	mock.Mock
}

type StructUtil_Expecter struct {
	mock *mock.Mock
}

func (_m *StructUtil) EXPECT() *StructUtil_Expecter {
	return &StructUtil_Expecter{mock: &_m.Mock}
}

// SetValueIfNotEmpty provides a mock function with given fields: data
func (_m *StructUtil) SetValueIfNotEmpty(data interface{}) interface{} {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for SetValueIfNotEmpty")
	}

	var r0 interface{}
	if rf, ok := ret.Get(0).(func(interface{}) interface{}); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(interface{})
		}
	}

	return r0
}

// StructUtil_SetValueIfNotEmpty_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SetValueIfNotEmpty'
type StructUtil_SetValueIfNotEmpty_Call struct {
	*mock.Call
}

// SetValueIfNotEmpty is a helper method to define mock.On call
//   - data interface{}
func (_e *StructUtil_Expecter) SetValueIfNotEmpty(data interface{}) *StructUtil_SetValueIfNotEmpty_Call {
	return &StructUtil_SetValueIfNotEmpty_Call{Call: _e.mock.On("SetValueIfNotEmpty", data)}
}

func (_c *StructUtil_SetValueIfNotEmpty_Call) Run(run func(data interface{})) *StructUtil_SetValueIfNotEmpty_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}))
	})
	return _c
}

func (_c *StructUtil_SetValueIfNotEmpty_Call) Return(result interface{}) *StructUtil_SetValueIfNotEmpty_Call {
	_c.Call.Return(result)
	return _c
}

func (_c *StructUtil_SetValueIfNotEmpty_Call) RunAndReturn(run func(interface{}) interface{}) *StructUtil_SetValueIfNotEmpty_Call {
	_c.Call.Return(run)
	return _c
}

// NewStructUtil creates a new instance of StructUtil. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStructUtil(t interface {
	mock.TestingT
	Cleanup(func())
}) *StructUtil {
	mock := &StructUtil{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
