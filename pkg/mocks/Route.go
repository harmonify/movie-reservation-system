// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	message "github.com/ThreeDotsLabs/watermill/message"
	mock "github.com/stretchr/testify/mock"
)

// Route is an autogenerated mock type for the Route type
type Route struct {
	mock.Mock
}

type Route_Expecter struct {
	mock *mock.Mock
}

func (_m *Route) EXPECT() *Route_Expecter {
	return &Route_Expecter{mock: &_m.Mock}
}

// Identifier provides a mock function with given fields:
func (_m *Route) Identifier() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Identifier")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Route_Identifier_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Identifier'
type Route_Identifier_Call struct {
	*mock.Call
}

// Identifier is a helper method to define mock.On call
func (_e *Route_Expecter) Identifier() *Route_Identifier_Call {
	return &Route_Identifier_Call{Call: _e.mock.On("Identifier")}
}

func (_c *Route_Identifier_Call) Run(run func()) *Route_Identifier_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Route_Identifier_Call) Return(_a0 string) *Route_Identifier_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Route_Identifier_Call) RunAndReturn(run func() string) *Route_Identifier_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: router, subscriber
func (_m *Route) Register(router *message.Router, subscriber message.Subscriber) error {
	ret := _m.Called(router, subscriber)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*message.Router, message.Subscriber) error); ok {
		r0 = rf(router, subscriber)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Route_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type Route_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - router *message.Router
//   - subscriber message.Subscriber
func (_e *Route_Expecter) Register(router interface{}, subscriber interface{}) *Route_Register_Call {
	return &Route_Register_Call{Call: _e.mock.On("Register", router, subscriber)}
}

func (_c *Route_Register_Call) Run(run func(router *message.Router, subscriber message.Subscriber)) *Route_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*message.Router), args[1].(message.Subscriber))
	})
	return _c
}

func (_c *Route_Register_Call) Return(_a0 error) *Route_Register_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Route_Register_Call) RunAndReturn(run func(*message.Router, message.Subscriber) error) *Route_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewRoute creates a new instance of Route. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRoute(t interface {
	mock.TestingT
	Cleanup(func())
}) *Route {
	mock := &Route{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
