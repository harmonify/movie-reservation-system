// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	gin "github.com/gin-gonic/gin"

	mock "github.com/stretchr/testify/mock"
)

// PrometheusHttpMiddleware is an autogenerated mock type for the PrometheusHttpMiddleware type
type PrometheusHttpMiddleware struct {
	mock.Mock
}

type PrometheusHttpMiddleware_Expecter struct {
	mock *mock.Mock
}

func (_m *PrometheusHttpMiddleware) EXPECT() *PrometheusHttpMiddleware_Expecter {
	return &PrometheusHttpMiddleware_Expecter{mock: &_m.Mock}
}

// LogHttpMetrics provides a mock function with given fields: c
func (_m *PrometheusHttpMiddleware) LogHttpMetrics(c *gin.Context) {
	_m.Called(c)
}

// PrometheusHttpMiddleware_LogHttpMetrics_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'LogHttpMetrics'
type PrometheusHttpMiddleware_LogHttpMetrics_Call struct {
	*mock.Call
}

// LogHttpMetrics is a helper method to define mock.On call
//   - c *gin.Context
func (_e *PrometheusHttpMiddleware_Expecter) LogHttpMetrics(c interface{}) *PrometheusHttpMiddleware_LogHttpMetrics_Call {
	return &PrometheusHttpMiddleware_LogHttpMetrics_Call{Call: _e.mock.On("LogHttpMetrics", c)}
}

func (_c *PrometheusHttpMiddleware_LogHttpMetrics_Call) Run(run func(c *gin.Context)) *PrometheusHttpMiddleware_LogHttpMetrics_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*gin.Context))
	})
	return _c
}

func (_c *PrometheusHttpMiddleware_LogHttpMetrics_Call) Return() *PrometheusHttpMiddleware_LogHttpMetrics_Call {
	_c.Call.Return()
	return _c
}

func (_c *PrometheusHttpMiddleware_LogHttpMetrics_Call) RunAndReturn(run func(*gin.Context)) *PrometheusHttpMiddleware_LogHttpMetrics_Call {
	_c.Call.Return(run)
	return _c
}

// NewPrometheusHttpMiddleware creates a new instance of PrometheusHttpMiddleware. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPrometheusHttpMiddleware(t interface {
	mock.TestingT
	Cleanup(func())
}) *PrometheusHttpMiddleware {
	mock := &PrometheusHttpMiddleware{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
