// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	messaging "github.com/harmonify/movie-reservation-system/user-service/lib/messaging"
	mock "github.com/stretchr/testify/mock"
)

// Messager is an autogenerated mock type for the Messager type
type Messager struct {
	mock.Mock
}

type Messager_Expecter struct {
	mock *mock.Mock
}

func (_m *Messager) EXPECT() *Messager_Expecter {
	return &Messager_Expecter{mock: &_m.Mock}
}

// Send provides a mock function with given fields: ctx, message
func (_m *Messager) Send(ctx context.Context, message messaging.Message) (string, error) {
	ret := _m.Called(ctx, message)

	if len(ret) == 0 {
		panic("no return value specified for Send")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, messaging.Message) (string, error)); ok {
		return rf(ctx, message)
	}
	if rf, ok := ret.Get(0).(func(context.Context, messaging.Message) string); ok {
		r0 = rf(ctx, message)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, messaging.Message) error); ok {
		r1 = rf(ctx, message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Messager_Send_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Send'
type Messager_Send_Call struct {
	*mock.Call
}

// Send is a helper method to define mock.On call
//   - ctx context.Context
//   - message messaging.Message
func (_e *Messager_Expecter) Send(ctx interface{}, message interface{}) *Messager_Send_Call {
	return &Messager_Send_Call{Call: _e.mock.On("Send", ctx, message)}
}

func (_c *Messager_Send_Call) Run(run func(ctx context.Context, message messaging.Message)) *Messager_Send_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(messaging.Message))
	})
	return _c
}

func (_c *Messager_Send_Call) Return(id string, err error) *Messager_Send_Call {
	_c.Call.Return(id, err)
	return _c
}

func (_c *Messager_Send_Call) RunAndReturn(run func(context.Context, messaging.Message) (string, error)) *Messager_Send_Call {
	_c.Call.Return(run)
	return _c
}

// NewMessager creates a new instance of Messager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMessager(t interface {
	mock.TestingT
	Cleanup(func())
}) *Messager {
	mock := &Messager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
