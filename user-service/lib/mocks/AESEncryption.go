// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import mock "github.com/stretchr/testify/mock"

// AESEncryption is an autogenerated mock type for the AESEncryption type
type AESEncryption struct {
	mock.Mock
}

type AESEncryption_Expecter struct {
	mock *mock.Mock
}

func (_m *AESEncryption) EXPECT() *AESEncryption_Expecter {
	return &AESEncryption_Expecter{mock: &_m.Mock}
}

// Decrypt provides a mock function with given fields: cipherTextCompleteBase64
func (_m *AESEncryption) Decrypt(cipherTextCompleteBase64 string) (string, error) {
	ret := _m.Called(cipherTextCompleteBase64)

	if len(ret) == 0 {
		panic("no return value specified for Decrypt")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(cipherTextCompleteBase64)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(cipherTextCompleteBase64)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(cipherTextCompleteBase64)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AESEncryption_Decrypt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Decrypt'
type AESEncryption_Decrypt_Call struct {
	*mock.Call
}

// Decrypt is a helper method to define mock.On call
//   - cipherTextCompleteBase64 string
func (_e *AESEncryption_Expecter) Decrypt(cipherTextCompleteBase64 interface{}) *AESEncryption_Decrypt_Call {
	return &AESEncryption_Decrypt_Call{Call: _e.mock.On("Decrypt", cipherTextCompleteBase64)}
}

func (_c *AESEncryption_Decrypt_Call) Run(run func(cipherTextCompleteBase64 string)) *AESEncryption_Decrypt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *AESEncryption_Decrypt_Call) Return(_a0 string, _a1 error) *AESEncryption_Decrypt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AESEncryption_Decrypt_Call) RunAndReturn(run func(string) (string, error)) *AESEncryption_Decrypt_Call {
	_c.Call.Return(run)
	return _c
}

// Encrypt provides a mock function with given fields: text
func (_m *AESEncryption) Encrypt(text string) (string, error) {
	ret := _m.Called(text)

	if len(ret) == 0 {
		panic("no return value specified for Encrypt")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (string, error)); ok {
		return rf(text)
	}
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(text)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(text)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AESEncryption_Encrypt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Encrypt'
type AESEncryption_Encrypt_Call struct {
	*mock.Call
}

// Encrypt is a helper method to define mock.On call
//   - text string
func (_e *AESEncryption_Expecter) Encrypt(text interface{}) *AESEncryption_Encrypt_Call {
	return &AESEncryption_Encrypt_Call{Call: _e.mock.On("Encrypt", text)}
}

func (_c *AESEncryption_Encrypt_Call) Run(run func(text string)) *AESEncryption_Encrypt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *AESEncryption_Encrypt_Call) Return(_a0 string, _a1 error) *AESEncryption_Encrypt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AESEncryption_Encrypt_Call) RunAndReturn(run func(string) (string, error)) *AESEncryption_Encrypt_Call {
	_c.Call.Return(run)
	return _c
}

// NewAESEncryption creates a new instance of AESEncryption. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAESEncryption(t interface {
	mock.TestingT
	Cleanup(func())
}) *AESEncryption {
	mock := &AESEncryption{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
