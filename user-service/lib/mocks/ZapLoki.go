// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	url "net/url"

	mock "github.com/stretchr/testify/mock"

	zap "go.uber.org/zap"

	zapcore "go.uber.org/zap/zapcore"
)

// ZapLoki is an autogenerated mock type for the ZapLoki type
type ZapLoki struct {
	mock.Mock
}

type ZapLoki_Expecter struct {
	mock *mock.Mock
}

func (_m *ZapLoki) EXPECT() *ZapLoki_Expecter {
	return &ZapLoki_Expecter{mock: &_m.Mock}
}

// Hook provides a mock function with given fields: e
func (_m *ZapLoki) Hook(e zapcore.Entry) error {
	ret := _m.Called(e)

	if len(ret) == 0 {
		panic("no return value specified for Hook")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(zapcore.Entry) error); ok {
		r0 = rf(e)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ZapLoki_Hook_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Hook'
type ZapLoki_Hook_Call struct {
	*mock.Call
}

// Hook is a helper method to define mock.On call
//   - e zapcore.Entry
func (_e *ZapLoki_Expecter) Hook(e interface{}) *ZapLoki_Hook_Call {
	return &ZapLoki_Hook_Call{Call: _e.mock.On("Hook", e)}
}

func (_c *ZapLoki_Hook_Call) Run(run func(e zapcore.Entry)) *ZapLoki_Hook_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(zapcore.Entry))
	})
	return _c
}

func (_c *ZapLoki_Hook_Call) Return(_a0 error) *ZapLoki_Hook_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *ZapLoki_Hook_Call) RunAndReturn(run func(zapcore.Entry) error) *ZapLoki_Hook_Call {
	_c.Call.Return(run)
	return _c
}

// Sink provides a mock function with given fields: u
func (_m *ZapLoki) Sink(u *url.URL) (zap.Sink, error) {
	ret := _m.Called(u)

	if len(ret) == 0 {
		panic("no return value specified for Sink")
	}

	var r0 zap.Sink
	var r1 error
	if rf, ok := ret.Get(0).(func(*url.URL) (zap.Sink, error)); ok {
		return rf(u)
	}
	if rf, ok := ret.Get(0).(func(*url.URL) zap.Sink); ok {
		r0 = rf(u)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(zap.Sink)
		}
	}

	if rf, ok := ret.Get(1).(func(*url.URL) error); ok {
		r1 = rf(u)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ZapLoki_Sink_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Sink'
type ZapLoki_Sink_Call struct {
	*mock.Call
}

// Sink is a helper method to define mock.On call
//   - u *url.URL
func (_e *ZapLoki_Expecter) Sink(u interface{}) *ZapLoki_Sink_Call {
	return &ZapLoki_Sink_Call{Call: _e.mock.On("Sink", u)}
}

func (_c *ZapLoki_Sink_Call) Run(run func(u *url.URL)) *ZapLoki_Sink_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*url.URL))
	})
	return _c
}

func (_c *ZapLoki_Sink_Call) Return(_a0 zap.Sink, _a1 error) *ZapLoki_Sink_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ZapLoki_Sink_Call) RunAndReturn(run func(*url.URL) (zap.Sink, error)) *ZapLoki_Sink_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with given fields:
func (_m *ZapLoki) Stop() {
	_m.Called()
}

// ZapLoki_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type ZapLoki_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *ZapLoki_Expecter) Stop() *ZapLoki_Stop_Call {
	return &ZapLoki_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *ZapLoki_Stop_Call) Run(run func()) *ZapLoki_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *ZapLoki_Stop_Call) Return() *ZapLoki_Stop_Call {
	_c.Call.Return()
	return _c
}

func (_c *ZapLoki_Stop_Call) RunAndReturn(run func()) *ZapLoki_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// WithCreateLogger provides a mock function with given fields: cfg, opts
func (_m *ZapLoki) WithCreateLogger(cfg zap.Config, opts ...zap.Option) (*zap.Logger, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, cfg)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for WithCreateLogger")
	}

	var r0 *zap.Logger
	var r1 error
	if rf, ok := ret.Get(0).(func(zap.Config, ...zap.Option) (*zap.Logger, error)); ok {
		return rf(cfg, opts...)
	}
	if rf, ok := ret.Get(0).(func(zap.Config, ...zap.Option) *zap.Logger); ok {
		r0 = rf(cfg, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*zap.Logger)
		}
	}

	if rf, ok := ret.Get(1).(func(zap.Config, ...zap.Option) error); ok {
		r1 = rf(cfg, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ZapLoki_WithCreateLogger_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithCreateLogger'
type ZapLoki_WithCreateLogger_Call struct {
	*mock.Call
}

// WithCreateLogger is a helper method to define mock.On call
//   - cfg zap.Config
//   - opts ...zap.Option
func (_e *ZapLoki_Expecter) WithCreateLogger(cfg interface{}, opts ...interface{}) *ZapLoki_WithCreateLogger_Call {
	return &ZapLoki_WithCreateLogger_Call{Call: _e.mock.On("WithCreateLogger",
		append([]interface{}{cfg}, opts...)...)}
}

func (_c *ZapLoki_WithCreateLogger_Call) Run(run func(cfg zap.Config, opts ...zap.Option)) *ZapLoki_WithCreateLogger_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]zap.Option, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(zap.Option)
			}
		}
		run(args[0].(zap.Config), variadicArgs...)
	})
	return _c
}

func (_c *ZapLoki_WithCreateLogger_Call) Return(_a0 *zap.Logger, _a1 error) *ZapLoki_WithCreateLogger_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *ZapLoki_WithCreateLogger_Call) RunAndReturn(run func(zap.Config, ...zap.Option) (*zap.Logger, error)) *ZapLoki_WithCreateLogger_Call {
	_c.Call.Return(run)
	return _c
}

// NewZapLoki creates a new instance of ZapLoki. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewZapLoki(t interface {
	mock.TestingT
	Cleanup(func())
}) *ZapLoki {
	mock := &ZapLoki{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
