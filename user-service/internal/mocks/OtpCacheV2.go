// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	shared "github.com/harmonify/movie-reservation-system/user-service/internal/core/shared"
	mock "github.com/stretchr/testify/mock"
)

// OtpCacheV2 is an autogenerated mock type for the OtpCacheV2 type
type OtpCacheV2 struct {
	mock.Mock
}

type OtpCacheV2_Expecter struct {
	mock *mock.Mock
}

func (_m *OtpCacheV2) EXPECT() *OtpCacheV2_Expecter {
	return &OtpCacheV2_Expecter{mock: &_m.Mock}
}

// DeleteOtp provides a mock function with given fields: ctx, uuid, otpType
func (_m *OtpCacheV2) DeleteOtp(ctx context.Context, uuid string, otpType shared.OtpType) (bool, error) {
	ret := _m.Called(ctx, uuid, otpType)

	if len(ret) == 0 {
		panic("no return value specified for DeleteOtp")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, shared.OtpType) (bool, error)); ok {
		return rf(ctx, uuid, otpType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, shared.OtpType) bool); ok {
		r0 = rf(ctx, uuid, otpType)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, shared.OtpType) error); ok {
		r1 = rf(ctx, uuid, otpType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OtpCacheV2_DeleteOtp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DeleteOtp'
type OtpCacheV2_DeleteOtp_Call struct {
	*mock.Call
}

// DeleteOtp is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
//   - otpType shared.OtpType
func (_e *OtpCacheV2_Expecter) DeleteOtp(ctx interface{}, uuid interface{}, otpType interface{}) *OtpCacheV2_DeleteOtp_Call {
	return &OtpCacheV2_DeleteOtp_Call{Call: _e.mock.On("DeleteOtp", ctx, uuid, otpType)}
}

func (_c *OtpCacheV2_DeleteOtp_Call) Run(run func(ctx context.Context, uuid string, otpType shared.OtpType)) *OtpCacheV2_DeleteOtp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(shared.OtpType))
	})
	return _c
}

func (_c *OtpCacheV2_DeleteOtp_Call) Return(_a0 bool, _a1 error) *OtpCacheV2_DeleteOtp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OtpCacheV2_DeleteOtp_Call) RunAndReturn(run func(context.Context, string, shared.OtpType) (bool, error)) *OtpCacheV2_DeleteOtp_Call {
	_c.Call.Return(run)
	return _c
}

// GetOtp provides a mock function with given fields: ctx, uuid, otpType
func (_m *OtpCacheV2) GetOtp(ctx context.Context, uuid string, otpType shared.OtpType) (*shared.Otp, error) {
	ret := _m.Called(ctx, uuid, otpType)

	if len(ret) == 0 {
		panic("no return value specified for GetOtp")
	}

	var r0 *shared.Otp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, shared.OtpType) (*shared.Otp, error)); ok {
		return rf(ctx, uuid, otpType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, shared.OtpType) *shared.Otp); ok {
		r0 = rf(ctx, uuid, otpType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shared.Otp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, shared.OtpType) error); ok {
		r1 = rf(ctx, uuid, otpType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OtpCacheV2_GetOtp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetOtp'
type OtpCacheV2_GetOtp_Call struct {
	*mock.Call
}

// GetOtp is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
//   - otpType shared.OtpType
func (_e *OtpCacheV2_Expecter) GetOtp(ctx interface{}, uuid interface{}, otpType interface{}) *OtpCacheV2_GetOtp_Call {
	return &OtpCacheV2_GetOtp_Call{Call: _e.mock.On("GetOtp", ctx, uuid, otpType)}
}

func (_c *OtpCacheV2_GetOtp_Call) Run(run func(ctx context.Context, uuid string, otpType shared.OtpType)) *OtpCacheV2_GetOtp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(shared.OtpType))
	})
	return _c
}

func (_c *OtpCacheV2_GetOtp_Call) Return(_a0 *shared.Otp, _a1 error) *OtpCacheV2_GetOtp_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OtpCacheV2_GetOtp_Call) RunAndReturn(run func(context.Context, string, shared.OtpType) (*shared.Otp, error)) *OtpCacheV2_GetOtp_Call {
	_c.Call.Return(run)
	return _c
}

// IncrementOtpAttempt provides a mock function with given fields: ctx, uuid, otpType
func (_m *OtpCacheV2) IncrementOtpAttempt(ctx context.Context, uuid string, otpType shared.OtpType) (*shared.Otp, error) {
	ret := _m.Called(ctx, uuid, otpType)

	if len(ret) == 0 {
		panic("no return value specified for IncrementOtpAttempt")
	}

	var r0 *shared.Otp
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, shared.OtpType) (*shared.Otp, error)); ok {
		return rf(ctx, uuid, otpType)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, shared.OtpType) *shared.Otp); ok {
		r0 = rf(ctx, uuid, otpType)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*shared.Otp)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, shared.OtpType) error); ok {
		r1 = rf(ctx, uuid, otpType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OtpCacheV2_IncrementOtpAttempt_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IncrementOtpAttempt'
type OtpCacheV2_IncrementOtpAttempt_Call struct {
	*mock.Call
}

// IncrementOtpAttempt is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
//   - otpType shared.OtpType
func (_e *OtpCacheV2_Expecter) IncrementOtpAttempt(ctx interface{}, uuid interface{}, otpType interface{}) *OtpCacheV2_IncrementOtpAttempt_Call {
	return &OtpCacheV2_IncrementOtpAttempt_Call{Call: _e.mock.On("IncrementOtpAttempt", ctx, uuid, otpType)}
}

func (_c *OtpCacheV2_IncrementOtpAttempt_Call) Run(run func(ctx context.Context, uuid string, otpType shared.OtpType)) *OtpCacheV2_IncrementOtpAttempt_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(shared.OtpType))
	})
	return _c
}

func (_c *OtpCacheV2_IncrementOtpAttempt_Call) Return(_a0 *shared.Otp, _a1 error) *OtpCacheV2_IncrementOtpAttempt_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OtpCacheV2_IncrementOtpAttempt_Call) RunAndReturn(run func(context.Context, string, shared.OtpType) (*shared.Otp, error)) *OtpCacheV2_IncrementOtpAttempt_Call {
	_c.Call.Return(run)
	return _c
}

// SaveOtp provides a mock function with given fields: ctx, uuid, otpType, code
func (_m *OtpCacheV2) SaveOtp(ctx context.Context, uuid string, otpType shared.OtpType, code string) error {
	ret := _m.Called(ctx, uuid, otpType, code)

	if len(ret) == 0 {
		panic("no return value specified for SaveOtp")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, shared.OtpType, string) error); ok {
		r0 = rf(ctx, uuid, otpType, code)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OtpCacheV2_SaveOtp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveOtp'
type OtpCacheV2_SaveOtp_Call struct {
	*mock.Call
}

// SaveOtp is a helper method to define mock.On call
//   - ctx context.Context
//   - uuid string
//   - otpType shared.OtpType
//   - code string
func (_e *OtpCacheV2_Expecter) SaveOtp(ctx interface{}, uuid interface{}, otpType interface{}, code interface{}) *OtpCacheV2_SaveOtp_Call {
	return &OtpCacheV2_SaveOtp_Call{Call: _e.mock.On("SaveOtp", ctx, uuid, otpType, code)}
}

func (_c *OtpCacheV2_SaveOtp_Call) Run(run func(ctx context.Context, uuid string, otpType shared.OtpType, code string)) *OtpCacheV2_SaveOtp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(shared.OtpType), args[3].(string))
	})
	return _c
}

func (_c *OtpCacheV2_SaveOtp_Call) Return(_a0 error) *OtpCacheV2_SaveOtp_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OtpCacheV2_SaveOtp_Call) RunAndReturn(run func(context.Context, string, shared.OtpType, string) error) *OtpCacheV2_SaveOtp_Call {
	_c.Call.Return(run)
	return _c
}

// NewOtpCacheV2 creates a new instance of OtpCacheV2. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOtpCacheV2(t interface {
	mock.TestingT
	Cleanup(func())
}) *OtpCacheV2 {
	mock := &OtpCacheV2{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
