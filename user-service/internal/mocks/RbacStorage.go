// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/harmonify/movie-reservation-system/pkg/database"
	mock "github.com/stretchr/testify/mock"

	shared "github.com/harmonify/movie-reservation-system/user-service/internal/core/shared"
)

// RbacStorage is an autogenerated mock type for the RbacStorage type
type RbacStorage struct {
	mock.Mock
}

type RbacStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *RbacStorage) EXPECT() *RbacStorage_Expecter {
	return &RbacStorage_Expecter{mock: &_m.Mock}
}

// BulkGrantPermission provides a mock function with given fields: ctx, p
func (_m *RbacStorage) BulkGrantPermission(ctx context.Context, p []shared.GrantPermissionParam) (bool, error) {
	ret := _m.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for BulkGrantPermission")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []shared.GrantPermissionParam) (bool, error)); ok {
		return rf(ctx, p)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []shared.GrantPermissionParam) bool); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, []shared.GrantPermissionParam) error); ok {
		r1 = rf(ctx, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RbacStorage_BulkGrantPermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkGrantPermission'
type RbacStorage_BulkGrantPermission_Call struct {
	*mock.Call
}

// BulkGrantPermission is a helper method to define mock.On call
//   - ctx context.Context
//   - p []shared.GrantPermissionParam
func (_e *RbacStorage_Expecter) BulkGrantPermission(ctx interface{}, p interface{}) *RbacStorage_BulkGrantPermission_Call {
	return &RbacStorage_BulkGrantPermission_Call{Call: _e.mock.On("BulkGrantPermission", ctx, p)}
}

func (_c *RbacStorage_BulkGrantPermission_Call) Run(run func(ctx context.Context, p []shared.GrantPermissionParam)) *RbacStorage_BulkGrantPermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]shared.GrantPermissionParam))
	})
	return _c
}

func (_c *RbacStorage_BulkGrantPermission_Call) Return(_a0 bool, _a1 error) *RbacStorage_BulkGrantPermission_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RbacStorage_BulkGrantPermission_Call) RunAndReturn(run func(context.Context, []shared.GrantPermissionParam) (bool, error)) *RbacStorage_BulkGrantPermission_Call {
	_c.Call.Return(run)
	return _c
}

// CheckPermission provides a mock function with given fields: ctx, p
func (_m *RbacStorage) CheckPermission(ctx context.Context, p shared.CheckPermissionParam) (bool, error) {
	ret := _m.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for CheckPermission")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, shared.CheckPermissionParam) (bool, error)); ok {
		return rf(ctx, p)
	}
	if rf, ok := ret.Get(0).(func(context.Context, shared.CheckPermissionParam) bool); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, shared.CheckPermissionParam) error); ok {
		r1 = rf(ctx, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RbacStorage_CheckPermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckPermission'
type RbacStorage_CheckPermission_Call struct {
	*mock.Call
}

// CheckPermission is a helper method to define mock.On call
//   - ctx context.Context
//   - p shared.CheckPermissionParam
func (_e *RbacStorage_Expecter) CheckPermission(ctx interface{}, p interface{}) *RbacStorage_CheckPermission_Call {
	return &RbacStorage_CheckPermission_Call{Call: _e.mock.On("CheckPermission", ctx, p)}
}

func (_c *RbacStorage_CheckPermission_Call) Run(run func(ctx context.Context, p shared.CheckPermissionParam)) *RbacStorage_CheckPermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(shared.CheckPermissionParam))
	})
	return _c
}

func (_c *RbacStorage_CheckPermission_Call) Return(_a0 bool, _a1 error) *RbacStorage_CheckPermission_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RbacStorage_CheckPermission_Call) RunAndReturn(run func(context.Context, shared.CheckPermissionParam) (bool, error)) *RbacStorage_CheckPermission_Call {
	_c.Call.Return(run)
	return _c
}

// GrantPermission provides a mock function with given fields: ctx, p
func (_m *RbacStorage) GrantPermission(ctx context.Context, p shared.GrantPermissionParam) (bool, error) {
	ret := _m.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for GrantPermission")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, shared.GrantPermissionParam) (bool, error)); ok {
		return rf(ctx, p)
	}
	if rf, ok := ret.Get(0).(func(context.Context, shared.GrantPermissionParam) bool); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, shared.GrantPermissionParam) error); ok {
		r1 = rf(ctx, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RbacStorage_GrantPermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GrantPermission'
type RbacStorage_GrantPermission_Call struct {
	*mock.Call
}

// GrantPermission is a helper method to define mock.On call
//   - ctx context.Context
//   - p shared.GrantPermissionParam
func (_e *RbacStorage_Expecter) GrantPermission(ctx interface{}, p interface{}) *RbacStorage_GrantPermission_Call {
	return &RbacStorage_GrantPermission_Call{Call: _e.mock.On("GrantPermission", ctx, p)}
}

func (_c *RbacStorage_GrantPermission_Call) Run(run func(ctx context.Context, p shared.GrantPermissionParam)) *RbacStorage_GrantPermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(shared.GrantPermissionParam))
	})
	return _c
}

func (_c *RbacStorage_GrantPermission_Call) Return(_a0 bool, _a1 error) *RbacStorage_GrantPermission_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RbacStorage_GrantPermission_Call) RunAndReturn(run func(context.Context, shared.GrantPermissionParam) (bool, error)) *RbacStorage_GrantPermission_Call {
	_c.Call.Return(run)
	return _c
}

// GrantRole provides a mock function with given fields: ctx, p
func (_m *RbacStorage) GrantRole(ctx context.Context, p shared.GrantRoleParam) (bool, error) {
	ret := _m.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for GrantRole")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, shared.GrantRoleParam) (bool, error)); ok {
		return rf(ctx, p)
	}
	if rf, ok := ret.Get(0).(func(context.Context, shared.GrantRoleParam) bool); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, shared.GrantRoleParam) error); ok {
		r1 = rf(ctx, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RbacStorage_GrantRole_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GrantRole'
type RbacStorage_GrantRole_Call struct {
	*mock.Call
}

// GrantRole is a helper method to define mock.On call
//   - ctx context.Context
//   - p shared.GrantRoleParam
func (_e *RbacStorage_Expecter) GrantRole(ctx interface{}, p interface{}) *RbacStorage_GrantRole_Call {
	return &RbacStorage_GrantRole_Call{Call: _e.mock.On("GrantRole", ctx, p)}
}

func (_c *RbacStorage_GrantRole_Call) Run(run func(ctx context.Context, p shared.GrantRoleParam)) *RbacStorage_GrantRole_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(shared.GrantRoleParam))
	})
	return _c
}

func (_c *RbacStorage_GrantRole_Call) Return(_a0 bool, _a1 error) *RbacStorage_GrantRole_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RbacStorage_GrantRole_Call) RunAndReturn(run func(context.Context, shared.GrantRoleParam) (bool, error)) *RbacStorage_GrantRole_Call {
	_c.Call.Return(run)
	return _c
}

// RevokePermission provides a mock function with given fields: ctx, p
func (_m *RbacStorage) RevokePermission(ctx context.Context, p shared.RevokePermissionParam) (bool, error) {
	ret := _m.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for RevokePermission")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, shared.RevokePermissionParam) (bool, error)); ok {
		return rf(ctx, p)
	}
	if rf, ok := ret.Get(0).(func(context.Context, shared.RevokePermissionParam) bool); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, shared.RevokePermissionParam) error); ok {
		r1 = rf(ctx, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RbacStorage_RevokePermission_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokePermission'
type RbacStorage_RevokePermission_Call struct {
	*mock.Call
}

// RevokePermission is a helper method to define mock.On call
//   - ctx context.Context
//   - p shared.RevokePermissionParam
func (_e *RbacStorage_Expecter) RevokePermission(ctx interface{}, p interface{}) *RbacStorage_RevokePermission_Call {
	return &RbacStorage_RevokePermission_Call{Call: _e.mock.On("RevokePermission", ctx, p)}
}

func (_c *RbacStorage_RevokePermission_Call) Run(run func(ctx context.Context, p shared.RevokePermissionParam)) *RbacStorage_RevokePermission_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(shared.RevokePermissionParam))
	})
	return _c
}

func (_c *RbacStorage_RevokePermission_Call) Return(_a0 bool, _a1 error) *RbacStorage_RevokePermission_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *RbacStorage_RevokePermission_Call) RunAndReturn(run func(context.Context, shared.RevokePermissionParam) (bool, error)) *RbacStorage_RevokePermission_Call {
	_c.Call.Return(run)
	return _c
}

// WithTx provides a mock function with given fields: tx
func (_m *RbacStorage) WithTx(tx *database.Transaction) shared.RbacStorage {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for WithTx")
	}

	var r0 shared.RbacStorage
	if rf, ok := ret.Get(0).(func(*database.Transaction) shared.RbacStorage); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(shared.RbacStorage)
		}
	}

	return r0
}

// RbacStorage_WithTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTx'
type RbacStorage_WithTx_Call struct {
	*mock.Call
}

// WithTx is a helper method to define mock.On call
//   - tx *database.Transaction
func (_e *RbacStorage_Expecter) WithTx(tx interface{}) *RbacStorage_WithTx_Call {
	return &RbacStorage_WithTx_Call{Call: _e.mock.On("WithTx", tx)}
}

func (_c *RbacStorage_WithTx_Call) Run(run func(tx *database.Transaction)) *RbacStorage_WithTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*database.Transaction))
	})
	return _c
}

func (_c *RbacStorage_WithTx_Call) Return(_a0 shared.RbacStorage) *RbacStorage_WithTx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *RbacStorage_WithTx_Call) RunAndReturn(run func(*database.Transaction) shared.RbacStorage) *RbacStorage_WithTx_Call {
	_c.Call.Return(run)
	return _c
}

// NewRbacStorage creates a new instance of RbacStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewRbacStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *RbacStorage {
	mock := &RbacStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
