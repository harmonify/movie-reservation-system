// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	notification_proto "github.com/harmonify/movie-reservation-system/pkg/proto/notification"
	mock "github.com/stretchr/testify/mock"
)

// NotificationProvider is an autogenerated mock type for the NotificationProvider type
type NotificationProvider struct {
	mock.Mock
}

type NotificationProvider_Expecter struct {
	mock *mock.Mock
}

func (_m *NotificationProvider) EXPECT() *NotificationProvider_Expecter {
	return &NotificationProvider_Expecter{mock: &_m.Mock}
}

// BulkSendSms provides a mock function with given fields: ctx, p
func (_m *NotificationProvider) BulkSendSms(ctx context.Context, p *notification_proto.BulkSendSmsRequest) error {
	ret := _m.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for BulkSendSms")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *notification_proto.BulkSendSmsRequest) error); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NotificationProvider_BulkSendSms_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkSendSms'
type NotificationProvider_BulkSendSms_Call struct {
	*mock.Call
}

// BulkSendSms is a helper method to define mock.On call
//   - ctx context.Context
//   - p *notification_proto.BulkSendSmsRequest
func (_e *NotificationProvider_Expecter) BulkSendSms(ctx interface{}, p interface{}) *NotificationProvider_BulkSendSms_Call {
	return &NotificationProvider_BulkSendSms_Call{Call: _e.mock.On("BulkSendSms", ctx, p)}
}

func (_c *NotificationProvider_BulkSendSms_Call) Run(run func(ctx context.Context, p *notification_proto.BulkSendSmsRequest)) *NotificationProvider_BulkSendSms_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*notification_proto.BulkSendSmsRequest))
	})
	return _c
}

func (_c *NotificationProvider_BulkSendSms_Call) Return(_a0 error) *NotificationProvider_BulkSendSms_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NotificationProvider_BulkSendSms_Call) RunAndReturn(run func(context.Context, *notification_proto.BulkSendSmsRequest) error) *NotificationProvider_BulkSendSms_Call {
	_c.Call.Return(run)
	return _c
}

// SendEmail provides a mock function with given fields: ctx, p
func (_m *NotificationProvider) SendEmail(ctx context.Context, p *notification_proto.SendEmailRequest) error {
	ret := _m.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for SendEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *notification_proto.SendEmailRequest) error); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NotificationProvider_SendEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendEmail'
type NotificationProvider_SendEmail_Call struct {
	*mock.Call
}

// SendEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - p *notification_proto.SendEmailRequest
func (_e *NotificationProvider_Expecter) SendEmail(ctx interface{}, p interface{}) *NotificationProvider_SendEmail_Call {
	return &NotificationProvider_SendEmail_Call{Call: _e.mock.On("SendEmail", ctx, p)}
}

func (_c *NotificationProvider_SendEmail_Call) Run(run func(ctx context.Context, p *notification_proto.SendEmailRequest)) *NotificationProvider_SendEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*notification_proto.SendEmailRequest))
	})
	return _c
}

func (_c *NotificationProvider_SendEmail_Call) Return(_a0 error) *NotificationProvider_SendEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NotificationProvider_SendEmail_Call) RunAndReturn(run func(context.Context, *notification_proto.SendEmailRequest) error) *NotificationProvider_SendEmail_Call {
	_c.Call.Return(run)
	return _c
}

// SendSms provides a mock function with given fields: ctx, p
func (_m *NotificationProvider) SendSms(ctx context.Context, p *notification_proto.SendSmsRequest) error {
	ret := _m.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for SendSms")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *notification_proto.SendSmsRequest) error); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NotificationProvider_SendSms_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendSms'
type NotificationProvider_SendSms_Call struct {
	*mock.Call
}

// SendSms is a helper method to define mock.On call
//   - ctx context.Context
//   - p *notification_proto.SendSmsRequest
func (_e *NotificationProvider_Expecter) SendSms(ctx interface{}, p interface{}) *NotificationProvider_SendSms_Call {
	return &NotificationProvider_SendSms_Call{Call: _e.mock.On("SendSms", ctx, p)}
}

func (_c *NotificationProvider_SendSms_Call) Run(run func(ctx context.Context, p *notification_proto.SendSmsRequest)) *NotificationProvider_SendSms_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*notification_proto.SendSmsRequest))
	})
	return _c
}

func (_c *NotificationProvider_SendSms_Call) Return(_a0 error) *NotificationProvider_SendSms_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *NotificationProvider_SendSms_Call) RunAndReturn(run func(context.Context, *notification_proto.SendSmsRequest) error) *NotificationProvider_SendSms_Call {
	_c.Call.Return(run)
	return _c
}

// NewNotificationProvider creates a new instance of NotificationProvider. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotificationProvider(t interface {
	mock.TestingT
	Cleanup(func())
}) *NotificationProvider {
	mock := &NotificationProvider{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
