// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	theater_proto "github.com/harmonify/movie-reservation-system/user-service/internal/driven/proto/theater"
)

// TheaterServiceClient is an autogenerated mock type for the TheaterServiceClient type
type TheaterServiceClient struct {
	mock.Mock
}

type TheaterServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *TheaterServiceClient) EXPECT() *TheaterServiceClient_Expecter {
	return &TheaterServiceClient_Expecter{mock: &_m.Mock}
}

// GetActiveMovies provides a mock function with given fields: ctx, in, opts
func (_m *TheaterServiceClient) GetActiveMovies(ctx context.Context, in *theater_proto.GetActiveMoviesRequest, opts ...grpc.CallOption) (*theater_proto.GetActiveMoviesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveMovies")
	}

	var r0 *theater_proto.GetActiveMoviesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *theater_proto.GetActiveMoviesRequest, ...grpc.CallOption) (*theater_proto.GetActiveMoviesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *theater_proto.GetActiveMoviesRequest, ...grpc.CallOption) *theater_proto.GetActiveMoviesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*theater_proto.GetActiveMoviesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *theater_proto.GetActiveMoviesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TheaterServiceClient_GetActiveMovies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveMovies'
type TheaterServiceClient_GetActiveMovies_Call struct {
	*mock.Call
}

// GetActiveMovies is a helper method to define mock.On call
//   - ctx context.Context
//   - in *theater_proto.GetActiveMoviesRequest
//   - opts ...grpc.CallOption
func (_e *TheaterServiceClient_Expecter) GetActiveMovies(ctx interface{}, in interface{}, opts ...interface{}) *TheaterServiceClient_GetActiveMovies_Call {
	return &TheaterServiceClient_GetActiveMovies_Call{Call: _e.mock.On("GetActiveMovies",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *TheaterServiceClient_GetActiveMovies_Call) Run(run func(ctx context.Context, in *theater_proto.GetActiveMoviesRequest, opts ...grpc.CallOption)) *TheaterServiceClient_GetActiveMovies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*theater_proto.GetActiveMoviesRequest), variadicArgs...)
	})
	return _c
}

func (_c *TheaterServiceClient_GetActiveMovies_Call) Return(_a0 *theater_proto.GetActiveMoviesResponse, _a1 error) *TheaterServiceClient_GetActiveMovies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TheaterServiceClient_GetActiveMovies_Call) RunAndReturn(run func(context.Context, *theater_proto.GetActiveMoviesRequest, ...grpc.CallOption) (*theater_proto.GetActiveMoviesResponse, error)) *TheaterServiceClient_GetActiveMovies_Call {
	_c.Call.Return(run)
	return _c
}

// GetActiveShowtimes provides a mock function with given fields: ctx, in, opts
func (_m *TheaterServiceClient) GetActiveShowtimes(ctx context.Context, in *theater_proto.GetActiveShowtimesRequest, opts ...grpc.CallOption) (*theater_proto.GetActiveShowtimesResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveShowtimes")
	}

	var r0 *theater_proto.GetActiveShowtimesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *theater_proto.GetActiveShowtimesRequest, ...grpc.CallOption) (*theater_proto.GetActiveShowtimesResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *theater_proto.GetActiveShowtimesRequest, ...grpc.CallOption) *theater_proto.GetActiveShowtimesResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*theater_proto.GetActiveShowtimesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *theater_proto.GetActiveShowtimesRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TheaterServiceClient_GetActiveShowtimes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveShowtimes'
type TheaterServiceClient_GetActiveShowtimes_Call struct {
	*mock.Call
}

// GetActiveShowtimes is a helper method to define mock.On call
//   - ctx context.Context
//   - in *theater_proto.GetActiveShowtimesRequest
//   - opts ...grpc.CallOption
func (_e *TheaterServiceClient_Expecter) GetActiveShowtimes(ctx interface{}, in interface{}, opts ...interface{}) *TheaterServiceClient_GetActiveShowtimes_Call {
	return &TheaterServiceClient_GetActiveShowtimes_Call{Call: _e.mock.On("GetActiveShowtimes",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *TheaterServiceClient_GetActiveShowtimes_Call) Run(run func(ctx context.Context, in *theater_proto.GetActiveShowtimesRequest, opts ...grpc.CallOption)) *TheaterServiceClient_GetActiveShowtimes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*theater_proto.GetActiveShowtimesRequest), variadicArgs...)
	})
	return _c
}

func (_c *TheaterServiceClient_GetActiveShowtimes_Call) Return(_a0 *theater_proto.GetActiveShowtimesResponse, _a1 error) *TheaterServiceClient_GetActiveShowtimes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TheaterServiceClient_GetActiveShowtimes_Call) RunAndReturn(run func(context.Context, *theater_proto.GetActiveShowtimesRequest, ...grpc.CallOption) (*theater_proto.GetActiveShowtimesResponse, error)) *TheaterServiceClient_GetActiveShowtimes_Call {
	_c.Call.Return(run)
	return _c
}

// GetAvailableSeats provides a mock function with given fields: ctx, in, opts
func (_m *TheaterServiceClient) GetAvailableSeats(ctx context.Context, in *theater_proto.GetAvailableSeatsRequest, opts ...grpc.CallOption) (*theater_proto.GetAvailableSeatsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for GetAvailableSeats")
	}

	var r0 *theater_proto.GetAvailableSeatsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *theater_proto.GetAvailableSeatsRequest, ...grpc.CallOption) (*theater_proto.GetAvailableSeatsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *theater_proto.GetAvailableSeatsRequest, ...grpc.CallOption) *theater_proto.GetAvailableSeatsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*theater_proto.GetAvailableSeatsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *theater_proto.GetAvailableSeatsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TheaterServiceClient_GetAvailableSeats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAvailableSeats'
type TheaterServiceClient_GetAvailableSeats_Call struct {
	*mock.Call
}

// GetAvailableSeats is a helper method to define mock.On call
//   - ctx context.Context
//   - in *theater_proto.GetAvailableSeatsRequest
//   - opts ...grpc.CallOption
func (_e *TheaterServiceClient_Expecter) GetAvailableSeats(ctx interface{}, in interface{}, opts ...interface{}) *TheaterServiceClient_GetAvailableSeats_Call {
	return &TheaterServiceClient_GetAvailableSeats_Call{Call: _e.mock.On("GetAvailableSeats",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *TheaterServiceClient_GetAvailableSeats_Call) Run(run func(ctx context.Context, in *theater_proto.GetAvailableSeatsRequest, opts ...grpc.CallOption)) *TheaterServiceClient_GetAvailableSeats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*theater_proto.GetAvailableSeatsRequest), variadicArgs...)
	})
	return _c
}

func (_c *TheaterServiceClient_GetAvailableSeats_Call) Return(_a0 *theater_proto.GetAvailableSeatsResponse, _a1 error) *TheaterServiceClient_GetAvailableSeats_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TheaterServiceClient_GetAvailableSeats_Call) RunAndReturn(run func(context.Context, *theater_proto.GetAvailableSeatsRequest, ...grpc.CallOption) (*theater_proto.GetAvailableSeatsResponse, error)) *TheaterServiceClient_GetAvailableSeats_Call {
	_c.Call.Return(run)
	return _c
}

// NewTheaterServiceClient creates a new instance of TheaterServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTheaterServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *TheaterServiceClient {
	mock := &TheaterServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
