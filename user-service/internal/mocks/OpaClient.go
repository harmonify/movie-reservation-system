// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// OpaClient is an autogenerated mock type for the OpaClient type
type OpaClient struct {
	mock.Mock
}

type OpaClient_Expecter struct {
	mock *mock.Mock
}

func (_m *OpaClient) EXPECT() *OpaClient_Expecter {
	return &OpaClient_Expecter{mock: &_m.Mock}
}

// HasAccess provides a mock function with given fields: ctx, policyId, input
func (_m *OpaClient) HasAccess(ctx context.Context, policyId string, input interface{}) (bool, error) {
	ret := _m.Called(ctx, policyId, input)

	if len(ret) == 0 {
		panic("no return value specified for HasAccess")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) (bool, error)); ok {
		return rf(ctx, policyId, input)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) bool); ok {
		r0 = rf(ctx, policyId, input)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, interface{}) error); ok {
		r1 = rf(ctx, policyId, input)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OpaClient_HasAccess_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HasAccess'
type OpaClient_HasAccess_Call struct {
	*mock.Call
}

// HasAccess is a helper method to define mock.On call
//   - ctx context.Context
//   - policyId string
//   - input interface{}
func (_e *OpaClient_Expecter) HasAccess(ctx interface{}, policyId interface{}, input interface{}) *OpaClient_HasAccess_Call {
	return &OpaClient_HasAccess_Call{Call: _e.mock.On("HasAccess", ctx, policyId, input)}
}

func (_c *OpaClient_HasAccess_Call) Run(run func(ctx context.Context, policyId string, input interface{})) *OpaClient_HasAccess_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(interface{}))
	})
	return _c
}

func (_c *OpaClient_HasAccess_Call) Return(_a0 bool, _a1 error) *OpaClient_HasAccess_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OpaClient_HasAccess_Call) RunAndReturn(run func(context.Context, string, interface{}) (bool, error)) *OpaClient_HasAccess_Call {
	_c.Call.Return(run)
	return _c
}

// NewOpaClient creates a new instance of OpaClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOpaClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *OpaClient {
	mock := &OpaClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
