// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	entity "github.com/harmonify/movie-reservation-system/user-service/internal/core/entity"

	mock "github.com/stretchr/testify/mock"
)

// UserKeyFactory is an autogenerated mock type for the UserKeyFactory type
type UserKeyFactory struct {
	mock.Mock
}

type UserKeyFactory_Expecter struct {
	mock *mock.Mock
}

func (_m *UserKeyFactory) EXPECT() *UserKeyFactory_Expecter {
	return &UserKeyFactory_Expecter{mock: &_m.Mock}
}

// GenerateUserKey provides a mock function with given fields: _a0
func (_m *UserKeyFactory) GenerateUserKey(_a0 *entity.User) *entity.UserKey {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for GenerateUserKey")
	}

	var r0 *entity.UserKey
	if rf, ok := ret.Get(0).(func(*entity.User) *entity.UserKey); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.UserKey)
		}
	}

	return r0
}

// UserKeyFactory_GenerateUserKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateUserKey'
type UserKeyFactory_GenerateUserKey_Call struct {
	*mock.Call
}

// GenerateUserKey is a helper method to define mock.On call
//   - _a0 *entity.User
func (_e *UserKeyFactory_Expecter) GenerateUserKey(_a0 interface{}) *UserKeyFactory_GenerateUserKey_Call {
	return &UserKeyFactory_GenerateUserKey_Call{Call: _e.mock.On("GenerateUserKey", _a0)}
}

func (_c *UserKeyFactory_GenerateUserKey_Call) Run(run func(_a0 *entity.User)) *UserKeyFactory_GenerateUserKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*entity.User))
	})
	return _c
}

func (_c *UserKeyFactory_GenerateUserKey_Call) Return(_a0 *entity.UserKey) *UserKeyFactory_GenerateUserKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserKeyFactory_GenerateUserKey_Call) RunAndReturn(run func(*entity.User) *entity.UserKey) *UserKeyFactory_GenerateUserKey_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserKeyFactory creates a new instance of UserKeyFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserKeyFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserKeyFactory {
	mock := &UserKeyFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
