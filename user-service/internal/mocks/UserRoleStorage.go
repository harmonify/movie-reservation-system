// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/harmonify/movie-reservation-system/pkg/database"
	entity "github.com/harmonify/movie-reservation-system/user-service/internal/core/entity"

	mock "github.com/stretchr/testify/mock"

	shared "github.com/harmonify/movie-reservation-system/user-service/internal/core/shared"
)

// UserRoleStorage is an autogenerated mock type for the UserRoleStorage type
type UserRoleStorage struct {
	mock.Mock
}

type UserRoleStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *UserRoleStorage) EXPECT() *UserRoleStorage_Expecter {
	return &UserRoleStorage_Expecter{mock: &_m.Mock}
}

// SaveUserRoles provides a mock function with given fields: ctx, createModel
func (_m *UserRoleStorage) SaveUserRoles(ctx context.Context, createModel entity.SaveUserRoles) ([]*entity.UserRole, error) {
	ret := _m.Called(ctx, createModel)

	if len(ret) == 0 {
		panic("no return value specified for SaveUserRoles")
	}

	var r0 []*entity.UserRole
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.SaveUserRoles) ([]*entity.UserRole, error)); ok {
		return rf(ctx, createModel)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.SaveUserRoles) []*entity.UserRole); ok {
		r0 = rf(ctx, createModel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*entity.UserRole)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.SaveUserRoles) error); ok {
		r1 = rf(ctx, createModel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRoleStorage_SaveUserRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveUserRoles'
type UserRoleStorage_SaveUserRoles_Call struct {
	*mock.Call
}

// SaveUserRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - createModel entity.SaveUserRoles
func (_e *UserRoleStorage_Expecter) SaveUserRoles(ctx interface{}, createModel interface{}) *UserRoleStorage_SaveUserRoles_Call {
	return &UserRoleStorage_SaveUserRoles_Call{Call: _e.mock.On("SaveUserRoles", ctx, createModel)}
}

func (_c *UserRoleStorage_SaveUserRoles_Call) Run(run func(ctx context.Context, createModel entity.SaveUserRoles)) *UserRoleStorage_SaveUserRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.SaveUserRoles))
	})
	return _c
}

func (_c *UserRoleStorage_SaveUserRoles_Call) Return(_a0 []*entity.UserRole, _a1 error) *UserRoleStorage_SaveUserRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRoleStorage_SaveUserRoles_Call) RunAndReturn(run func(context.Context, entity.SaveUserRoles) ([]*entity.UserRole, error)) *UserRoleStorage_SaveUserRoles_Call {
	_c.Call.Return(run)
	return _c
}

// SearchUserRoles provides a mock function with given fields: ctx, searchModel
func (_m *UserRoleStorage) SearchUserRoles(ctx context.Context, searchModel entity.SearchUserRoles) ([]string, error) {
	ret := _m.Called(ctx, searchModel)

	if len(ret) == 0 {
		panic("no return value specified for SearchUserRoles")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.SearchUserRoles) ([]string, error)); ok {
		return rf(ctx, searchModel)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.SearchUserRoles) []string); ok {
		r0 = rf(ctx, searchModel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.SearchUserRoles) error); ok {
		r1 = rf(ctx, searchModel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserRoleStorage_SearchUserRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SearchUserRoles'
type UserRoleStorage_SearchUserRoles_Call struct {
	*mock.Call
}

// SearchUserRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - searchModel entity.SearchUserRoles
func (_e *UserRoleStorage_Expecter) SearchUserRoles(ctx interface{}, searchModel interface{}) *UserRoleStorage_SearchUserRoles_Call {
	return &UserRoleStorage_SearchUserRoles_Call{Call: _e.mock.On("SearchUserRoles", ctx, searchModel)}
}

func (_c *UserRoleStorage_SearchUserRoles_Call) Run(run func(ctx context.Context, searchModel entity.SearchUserRoles)) *UserRoleStorage_SearchUserRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.SearchUserRoles))
	})
	return _c
}

func (_c *UserRoleStorage_SearchUserRoles_Call) Return(_a0 []string, _a1 error) *UserRoleStorage_SearchUserRoles_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserRoleStorage_SearchUserRoles_Call) RunAndReturn(run func(context.Context, entity.SearchUserRoles) ([]string, error)) *UserRoleStorage_SearchUserRoles_Call {
	_c.Call.Return(run)
	return _c
}

// SoftDeleteUserRoles provides a mock function with given fields: ctx, searchModel
func (_m *UserRoleStorage) SoftDeleteUserRoles(ctx context.Context, searchModel entity.SearchUserRoles) error {
	ret := _m.Called(ctx, searchModel)

	if len(ret) == 0 {
		panic("no return value specified for SoftDeleteUserRoles")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.SearchUserRoles) error); ok {
		r0 = rf(ctx, searchModel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserRoleStorage_SoftDeleteUserRoles_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SoftDeleteUserRoles'
type UserRoleStorage_SoftDeleteUserRoles_Call struct {
	*mock.Call
}

// SoftDeleteUserRoles is a helper method to define mock.On call
//   - ctx context.Context
//   - searchModel entity.SearchUserRoles
func (_e *UserRoleStorage_Expecter) SoftDeleteUserRoles(ctx interface{}, searchModel interface{}) *UserRoleStorage_SoftDeleteUserRoles_Call {
	return &UserRoleStorage_SoftDeleteUserRoles_Call{Call: _e.mock.On("SoftDeleteUserRoles", ctx, searchModel)}
}

func (_c *UserRoleStorage_SoftDeleteUserRoles_Call) Run(run func(ctx context.Context, searchModel entity.SearchUserRoles)) *UserRoleStorage_SoftDeleteUserRoles_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.SearchUserRoles))
	})
	return _c
}

func (_c *UserRoleStorage_SoftDeleteUserRoles_Call) Return(_a0 error) *UserRoleStorage_SoftDeleteUserRoles_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRoleStorage_SoftDeleteUserRoles_Call) RunAndReturn(run func(context.Context, entity.SearchUserRoles) error) *UserRoleStorage_SoftDeleteUserRoles_Call {
	_c.Call.Return(run)
	return _c
}

// WithTx provides a mock function with given fields: tx
func (_m *UserRoleStorage) WithTx(tx *database.Transaction) shared.UserRoleStorage {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for WithTx")
	}

	var r0 shared.UserRoleStorage
	if rf, ok := ret.Get(0).(func(*database.Transaction) shared.UserRoleStorage); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(shared.UserRoleStorage)
		}
	}

	return r0
}

// UserRoleStorage_WithTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTx'
type UserRoleStorage_WithTx_Call struct {
	*mock.Call
}

// WithTx is a helper method to define mock.On call
//   - tx *database.Transaction
func (_e *UserRoleStorage_Expecter) WithTx(tx interface{}) *UserRoleStorage_WithTx_Call {
	return &UserRoleStorage_WithTx_Call{Call: _e.mock.On("WithTx", tx)}
}

func (_c *UserRoleStorage_WithTx_Call) Run(run func(tx *database.Transaction)) *UserRoleStorage_WithTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*database.Transaction))
	})
	return _c
}

func (_c *UserRoleStorage_WithTx_Call) Return(_a0 shared.UserRoleStorage) *UserRoleStorage_WithTx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserRoleStorage_WithTx_Call) RunAndReturn(run func(*database.Transaction) shared.UserRoleStorage) *UserRoleStorage_WithTx_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserRoleStorage creates a new instance of UserRoleStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserRoleStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserRoleStorage {
	mock := &UserRoleStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
