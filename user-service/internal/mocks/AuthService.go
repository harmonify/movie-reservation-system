// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	auth_service "github.com/harmonify/movie-reservation-system/user-service/internal/core/service/auth"

	mock "github.com/stretchr/testify/mock"
)

// AuthService is an autogenerated mock type for the AuthService type
type AuthService struct {
	mock.Mock
}

type AuthService_Expecter struct {
	mock *mock.Mock
}

func (_m *AuthService) EXPECT() *AuthService_Expecter {
	return &AuthService_Expecter{mock: &_m.Mock}
}

// GetToken provides a mock function with given fields: ctx, p
func (_m *AuthService) GetToken(ctx context.Context, p auth_service.GetTokenParam) (*auth_service.GetTokenResult, error) {
	ret := _m.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for GetToken")
	}

	var r0 *auth_service.GetTokenResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, auth_service.GetTokenParam) (*auth_service.GetTokenResult, error)); ok {
		return rf(ctx, p)
	}
	if rf, ok := ret.Get(0).(func(context.Context, auth_service.GetTokenParam) *auth_service.GetTokenResult); ok {
		r0 = rf(ctx, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth_service.GetTokenResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, auth_service.GetTokenParam) error); ok {
		r1 = rf(ctx, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthService_GetToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetToken'
type AuthService_GetToken_Call struct {
	*mock.Call
}

// GetToken is a helper method to define mock.On call
//   - ctx context.Context
//   - p auth_service.GetTokenParam
func (_e *AuthService_Expecter) GetToken(ctx interface{}, p interface{}) *AuthService_GetToken_Call {
	return &AuthService_GetToken_Call{Call: _e.mock.On("GetToken", ctx, p)}
}

func (_c *AuthService_GetToken_Call) Run(run func(ctx context.Context, p auth_service.GetTokenParam)) *AuthService_GetToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(auth_service.GetTokenParam))
	})
	return _c
}

func (_c *AuthService_GetToken_Call) Return(_a0 *auth_service.GetTokenResult, _a1 error) *AuthService_GetToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthService_GetToken_Call) RunAndReturn(run func(context.Context, auth_service.GetTokenParam) (*auth_service.GetTokenResult, error)) *AuthService_GetToken_Call {
	_c.Call.Return(run)
	return _c
}

// Login provides a mock function with given fields: ctx, p
func (_m *AuthService) Login(ctx context.Context, p auth_service.LoginParam) (*auth_service.LoginResult, error) {
	ret := _m.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 *auth_service.LoginResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, auth_service.LoginParam) (*auth_service.LoginResult, error)); ok {
		return rf(ctx, p)
	}
	if rf, ok := ret.Get(0).(func(context.Context, auth_service.LoginParam) *auth_service.LoginResult); ok {
		r0 = rf(ctx, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*auth_service.LoginResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, auth_service.LoginParam) error); ok {
		r1 = rf(ctx, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AuthService_Login_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Login'
type AuthService_Login_Call struct {
	*mock.Call
}

// Login is a helper method to define mock.On call
//   - ctx context.Context
//   - p auth_service.LoginParam
func (_e *AuthService_Expecter) Login(ctx interface{}, p interface{}) *AuthService_Login_Call {
	return &AuthService_Login_Call{Call: _e.mock.On("Login", ctx, p)}
}

func (_c *AuthService_Login_Call) Run(run func(ctx context.Context, p auth_service.LoginParam)) *AuthService_Login_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(auth_service.LoginParam))
	})
	return _c
}

func (_c *AuthService_Login_Call) Return(_a0 *auth_service.LoginResult, _a1 error) *AuthService_Login_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *AuthService_Login_Call) RunAndReturn(run func(context.Context, auth_service.LoginParam) (*auth_service.LoginResult, error)) *AuthService_Login_Call {
	_c.Call.Return(run)
	return _c
}

// Logout provides a mock function with given fields: ctx, p
func (_m *AuthService) Logout(ctx context.Context, p auth_service.LogoutParam) error {
	ret := _m.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, auth_service.LogoutParam) error); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthService_Logout_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Logout'
type AuthService_Logout_Call struct {
	*mock.Call
}

// Logout is a helper method to define mock.On call
//   - ctx context.Context
//   - p auth_service.LogoutParam
func (_e *AuthService_Expecter) Logout(ctx interface{}, p interface{}) *AuthService_Logout_Call {
	return &AuthService_Logout_Call{Call: _e.mock.On("Logout", ctx, p)}
}

func (_c *AuthService_Logout_Call) Run(run func(ctx context.Context, p auth_service.LogoutParam)) *AuthService_Logout_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(auth_service.LogoutParam))
	})
	return _c
}

func (_c *AuthService_Logout_Call) Return(_a0 error) *AuthService_Logout_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthService_Logout_Call) RunAndReturn(run func(context.Context, auth_service.LogoutParam) error) *AuthService_Logout_Call {
	_c.Call.Return(run)
	return _c
}

// Register provides a mock function with given fields: ctx, p
func (_m *AuthService) Register(ctx context.Context, p auth_service.RegisterParam) error {
	ret := _m.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for Register")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, auth_service.RegisterParam) error); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AuthService_Register_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Register'
type AuthService_Register_Call struct {
	*mock.Call
}

// Register is a helper method to define mock.On call
//   - ctx context.Context
//   - p auth_service.RegisterParam
func (_e *AuthService_Expecter) Register(ctx interface{}, p interface{}) *AuthService_Register_Call {
	return &AuthService_Register_Call{Call: _e.mock.On("Register", ctx, p)}
}

func (_c *AuthService_Register_Call) Run(run func(ctx context.Context, p auth_service.RegisterParam)) *AuthService_Register_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(auth_service.RegisterParam))
	})
	return _c
}

func (_c *AuthService_Register_Call) Return(_a0 error) *AuthService_Register_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *AuthService_Register_Call) RunAndReturn(run func(context.Context, auth_service.RegisterParam) error) *AuthService_Register_Call {
	_c.Call.Return(run)
	return _c
}

// NewAuthService creates a new instance of AuthService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthService(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthService {
	mock := &AuthService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
