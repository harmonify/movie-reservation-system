// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	theater_proto "github.com/harmonify/movie-reservation-system/user-service/internal/driven/proto/theater"
	mock "github.com/stretchr/testify/mock"
)

// TheaterServiceServer is an autogenerated mock type for the TheaterServiceServer type
type TheaterServiceServer struct {
	mock.Mock
}

type TheaterServiceServer_Expecter struct {
	mock *mock.Mock
}

func (_m *TheaterServiceServer) EXPECT() *TheaterServiceServer_Expecter {
	return &TheaterServiceServer_Expecter{mock: &_m.Mock}
}

// GetActiveMovies provides a mock function with given fields: _a0, _a1
func (_m *TheaterServiceServer) GetActiveMovies(_a0 context.Context, _a1 *theater_proto.GetActiveMoviesRequest) (*theater_proto.GetActiveMoviesResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveMovies")
	}

	var r0 *theater_proto.GetActiveMoviesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *theater_proto.GetActiveMoviesRequest) (*theater_proto.GetActiveMoviesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *theater_proto.GetActiveMoviesRequest) *theater_proto.GetActiveMoviesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*theater_proto.GetActiveMoviesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *theater_proto.GetActiveMoviesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TheaterServiceServer_GetActiveMovies_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveMovies'
type TheaterServiceServer_GetActiveMovies_Call struct {
	*mock.Call
}

// GetActiveMovies is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *theater_proto.GetActiveMoviesRequest
func (_e *TheaterServiceServer_Expecter) GetActiveMovies(_a0 interface{}, _a1 interface{}) *TheaterServiceServer_GetActiveMovies_Call {
	return &TheaterServiceServer_GetActiveMovies_Call{Call: _e.mock.On("GetActiveMovies", _a0, _a1)}
}

func (_c *TheaterServiceServer_GetActiveMovies_Call) Run(run func(_a0 context.Context, _a1 *theater_proto.GetActiveMoviesRequest)) *TheaterServiceServer_GetActiveMovies_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*theater_proto.GetActiveMoviesRequest))
	})
	return _c
}

func (_c *TheaterServiceServer_GetActiveMovies_Call) Return(_a0 *theater_proto.GetActiveMoviesResponse, _a1 error) *TheaterServiceServer_GetActiveMovies_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TheaterServiceServer_GetActiveMovies_Call) RunAndReturn(run func(context.Context, *theater_proto.GetActiveMoviesRequest) (*theater_proto.GetActiveMoviesResponse, error)) *TheaterServiceServer_GetActiveMovies_Call {
	_c.Call.Return(run)
	return _c
}

// GetActiveShowtimes provides a mock function with given fields: _a0, _a1
func (_m *TheaterServiceServer) GetActiveShowtimes(_a0 context.Context, _a1 *theater_proto.GetActiveShowtimesRequest) (*theater_proto.GetActiveShowtimesResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetActiveShowtimes")
	}

	var r0 *theater_proto.GetActiveShowtimesResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *theater_proto.GetActiveShowtimesRequest) (*theater_proto.GetActiveShowtimesResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *theater_proto.GetActiveShowtimesRequest) *theater_proto.GetActiveShowtimesResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*theater_proto.GetActiveShowtimesResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *theater_proto.GetActiveShowtimesRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TheaterServiceServer_GetActiveShowtimes_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetActiveShowtimes'
type TheaterServiceServer_GetActiveShowtimes_Call struct {
	*mock.Call
}

// GetActiveShowtimes is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *theater_proto.GetActiveShowtimesRequest
func (_e *TheaterServiceServer_Expecter) GetActiveShowtimes(_a0 interface{}, _a1 interface{}) *TheaterServiceServer_GetActiveShowtimes_Call {
	return &TheaterServiceServer_GetActiveShowtimes_Call{Call: _e.mock.On("GetActiveShowtimes", _a0, _a1)}
}

func (_c *TheaterServiceServer_GetActiveShowtimes_Call) Run(run func(_a0 context.Context, _a1 *theater_proto.GetActiveShowtimesRequest)) *TheaterServiceServer_GetActiveShowtimes_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*theater_proto.GetActiveShowtimesRequest))
	})
	return _c
}

func (_c *TheaterServiceServer_GetActiveShowtimes_Call) Return(_a0 *theater_proto.GetActiveShowtimesResponse, _a1 error) *TheaterServiceServer_GetActiveShowtimes_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TheaterServiceServer_GetActiveShowtimes_Call) RunAndReturn(run func(context.Context, *theater_proto.GetActiveShowtimesRequest) (*theater_proto.GetActiveShowtimesResponse, error)) *TheaterServiceServer_GetActiveShowtimes_Call {
	_c.Call.Return(run)
	return _c
}

// GetAvailableSeats provides a mock function with given fields: _a0, _a1
func (_m *TheaterServiceServer) GetAvailableSeats(_a0 context.Context, _a1 *theater_proto.GetAvailableSeatsRequest) (*theater_proto.GetAvailableSeatsResponse, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetAvailableSeats")
	}

	var r0 *theater_proto.GetAvailableSeatsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *theater_proto.GetAvailableSeatsRequest) (*theater_proto.GetAvailableSeatsResponse, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *theater_proto.GetAvailableSeatsRequest) *theater_proto.GetAvailableSeatsResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*theater_proto.GetAvailableSeatsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *theater_proto.GetAvailableSeatsRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// TheaterServiceServer_GetAvailableSeats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAvailableSeats'
type TheaterServiceServer_GetAvailableSeats_Call struct {
	*mock.Call
}

// GetAvailableSeats is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 *theater_proto.GetAvailableSeatsRequest
func (_e *TheaterServiceServer_Expecter) GetAvailableSeats(_a0 interface{}, _a1 interface{}) *TheaterServiceServer_GetAvailableSeats_Call {
	return &TheaterServiceServer_GetAvailableSeats_Call{Call: _e.mock.On("GetAvailableSeats", _a0, _a1)}
}

func (_c *TheaterServiceServer_GetAvailableSeats_Call) Run(run func(_a0 context.Context, _a1 *theater_proto.GetAvailableSeatsRequest)) *TheaterServiceServer_GetAvailableSeats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*theater_proto.GetAvailableSeatsRequest))
	})
	return _c
}

func (_c *TheaterServiceServer_GetAvailableSeats_Call) Return(_a0 *theater_proto.GetAvailableSeatsResponse, _a1 error) *TheaterServiceServer_GetAvailableSeats_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *TheaterServiceServer_GetAvailableSeats_Call) RunAndReturn(run func(context.Context, *theater_proto.GetAvailableSeatsRequest) (*theater_proto.GetAvailableSeatsResponse, error)) *TheaterServiceServer_GetAvailableSeats_Call {
	_c.Call.Return(run)
	return _c
}

// mustEmbedUnimplementedTheaterServiceServer provides a mock function with given fields:
func (_m *TheaterServiceServer) mustEmbedUnimplementedTheaterServiceServer() {
	_m.Called()
}

// TheaterServiceServer_mustEmbedUnimplementedTheaterServiceServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'mustEmbedUnimplementedTheaterServiceServer'
type TheaterServiceServer_mustEmbedUnimplementedTheaterServiceServer_Call struct {
	*mock.Call
}

// mustEmbedUnimplementedTheaterServiceServer is a helper method to define mock.On call
func (_e *TheaterServiceServer_Expecter) mustEmbedUnimplementedTheaterServiceServer() *TheaterServiceServer_mustEmbedUnimplementedTheaterServiceServer_Call {
	return &TheaterServiceServer_mustEmbedUnimplementedTheaterServiceServer_Call{Call: _e.mock.On("mustEmbedUnimplementedTheaterServiceServer")}
}

func (_c *TheaterServiceServer_mustEmbedUnimplementedTheaterServiceServer_Call) Run(run func()) *TheaterServiceServer_mustEmbedUnimplementedTheaterServiceServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *TheaterServiceServer_mustEmbedUnimplementedTheaterServiceServer_Call) Return() *TheaterServiceServer_mustEmbedUnimplementedTheaterServiceServer_Call {
	_c.Call.Return()
	return _c
}

func (_c *TheaterServiceServer_mustEmbedUnimplementedTheaterServiceServer_Call) RunAndReturn(run func()) *TheaterServiceServer_mustEmbedUnimplementedTheaterServiceServer_Call {
	_c.Call.Return(run)
	return _c
}

// NewTheaterServiceServer creates a new instance of TheaterServiceServer. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTheaterServiceServer(t interface {
	mock.TestingT
	Cleanup(func())
}) *TheaterServiceServer {
	mock := &TheaterServiceServer{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
