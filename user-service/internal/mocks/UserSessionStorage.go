// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/harmonify/movie-reservation-system/pkg/database"
	entity "github.com/harmonify/movie-reservation-system/user-service/internal/core/entity"

	mock "github.com/stretchr/testify/mock"

	shared "github.com/harmonify/movie-reservation-system/user-service/internal/core/shared"
)

// UserSessionStorage is an autogenerated mock type for the UserSessionStorage type
type UserSessionStorage struct {
	mock.Mock
}

type UserSessionStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *UserSessionStorage) EXPECT() *UserSessionStorage_Expecter {
	return &UserSessionStorage_Expecter{mock: &_m.Mock}
}

// GetSession provides a mock function with given fields: ctx, getModel
func (_m *UserSessionStorage) GetSession(ctx context.Context, getModel entity.GetUserSession) (*entity.UserSession, error) {
	ret := _m.Called(ctx, getModel)

	if len(ret) == 0 {
		panic("no return value specified for GetSession")
	}

	var r0 *entity.UserSession
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.GetUserSession) (*entity.UserSession, error)); ok {
		return rf(ctx, getModel)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.GetUserSession) *entity.UserSession); ok {
		r0 = rf(ctx, getModel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.UserSession)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.GetUserSession) error); ok {
		r1 = rf(ctx, getModel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserSessionStorage_GetSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetSession'
type UserSessionStorage_GetSession_Call struct {
	*mock.Call
}

// GetSession is a helper method to define mock.On call
//   - ctx context.Context
//   - getModel entity.GetUserSession
func (_e *UserSessionStorage_Expecter) GetSession(ctx interface{}, getModel interface{}) *UserSessionStorage_GetSession_Call {
	return &UserSessionStorage_GetSession_Call{Call: _e.mock.On("GetSession", ctx, getModel)}
}

func (_c *UserSessionStorage_GetSession_Call) Run(run func(ctx context.Context, getModel entity.GetUserSession)) *UserSessionStorage_GetSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.GetUserSession))
	})
	return _c
}

func (_c *UserSessionStorage_GetSession_Call) Return(_a0 *entity.UserSession, _a1 error) *UserSessionStorage_GetSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserSessionStorage_GetSession_Call) RunAndReturn(run func(context.Context, entity.GetUserSession) (*entity.UserSession, error)) *UserSessionStorage_GetSession_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeManySession provides a mock function with given fields: ctx, refreshTokens
func (_m *UserSessionStorage) RevokeManySession(ctx context.Context, refreshTokens []string) error {
	ret := _m.Called(ctx, refreshTokens)

	if len(ret) == 0 {
		panic("no return value specified for RevokeManySession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) error); ok {
		r0 = rf(ctx, refreshTokens)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserSessionStorage_RevokeManySession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeManySession'
type UserSessionStorage_RevokeManySession_Call struct {
	*mock.Call
}

// RevokeManySession is a helper method to define mock.On call
//   - ctx context.Context
//   - refreshTokens []string
func (_e *UserSessionStorage_Expecter) RevokeManySession(ctx interface{}, refreshTokens interface{}) *UserSessionStorage_RevokeManySession_Call {
	return &UserSessionStorage_RevokeManySession_Call{Call: _e.mock.On("RevokeManySession", ctx, refreshTokens)}
}

func (_c *UserSessionStorage_RevokeManySession_Call) Run(run func(ctx context.Context, refreshTokens []string)) *UserSessionStorage_RevokeManySession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *UserSessionStorage_RevokeManySession_Call) Return(err error) *UserSessionStorage_RevokeManySession_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *UserSessionStorage_RevokeManySession_Call) RunAndReturn(run func(context.Context, []string) error) *UserSessionStorage_RevokeManySession_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeSession provides a mock function with given fields: ctx, refreshToken
func (_m *UserSessionStorage) RevokeSession(ctx context.Context, refreshToken string) error {
	ret := _m.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for RevokeSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserSessionStorage_RevokeSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeSession'
type UserSessionStorage_RevokeSession_Call struct {
	*mock.Call
}

// RevokeSession is a helper method to define mock.On call
//   - ctx context.Context
//   - refreshToken string
func (_e *UserSessionStorage_Expecter) RevokeSession(ctx interface{}, refreshToken interface{}) *UserSessionStorage_RevokeSession_Call {
	return &UserSessionStorage_RevokeSession_Call{Call: _e.mock.On("RevokeSession", ctx, refreshToken)}
}

func (_c *UserSessionStorage_RevokeSession_Call) Run(run func(ctx context.Context, refreshToken string)) *UserSessionStorage_RevokeSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *UserSessionStorage_RevokeSession_Call) Return(err error) *UserSessionStorage_RevokeSession_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *UserSessionStorage_RevokeSession_Call) RunAndReturn(run func(context.Context, string) error) *UserSessionStorage_RevokeSession_Call {
	_c.Call.Return(run)
	return _c
}

// SaveSession provides a mock function with given fields: ctx, createModel
func (_m *UserSessionStorage) SaveSession(ctx context.Context, createModel entity.SaveUserSession) (*entity.UserSession, error) {
	ret := _m.Called(ctx, createModel)

	if len(ret) == 0 {
		panic("no return value specified for SaveSession")
	}

	var r0 *entity.UserSession
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.SaveUserSession) (*entity.UserSession, error)); ok {
		return rf(ctx, createModel)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.SaveUserSession) *entity.UserSession); ok {
		r0 = rf(ctx, createModel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.UserSession)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.SaveUserSession) error); ok {
		r1 = rf(ctx, createModel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserSessionStorage_SaveSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveSession'
type UserSessionStorage_SaveSession_Call struct {
	*mock.Call
}

// SaveSession is a helper method to define mock.On call
//   - ctx context.Context
//   - createModel entity.SaveUserSession
func (_e *UserSessionStorage_Expecter) SaveSession(ctx interface{}, createModel interface{}) *UserSessionStorage_SaveSession_Call {
	return &UserSessionStorage_SaveSession_Call{Call: _e.mock.On("SaveSession", ctx, createModel)}
}

func (_c *UserSessionStorage_SaveSession_Call) Run(run func(ctx context.Context, createModel entity.SaveUserSession)) *UserSessionStorage_SaveSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.SaveUserSession))
	})
	return _c
}

func (_c *UserSessionStorage_SaveSession_Call) Return(_a0 *entity.UserSession, _a1 error) *UserSessionStorage_SaveSession_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserSessionStorage_SaveSession_Call) RunAndReturn(run func(context.Context, entity.SaveUserSession) (*entity.UserSession, error)) *UserSessionStorage_SaveSession_Call {
	_c.Call.Return(run)
	return _c
}

// SoftDeleteSession provides a mock function with given fields: ctx, getModel
func (_m *UserSessionStorage) SoftDeleteSession(ctx context.Context, getModel entity.GetUserSession) error {
	ret := _m.Called(ctx, getModel)

	if len(ret) == 0 {
		panic("no return value specified for SoftDeleteSession")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.GetUserSession) error); ok {
		r0 = rf(ctx, getModel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserSessionStorage_SoftDeleteSession_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SoftDeleteSession'
type UserSessionStorage_SoftDeleteSession_Call struct {
	*mock.Call
}

// SoftDeleteSession is a helper method to define mock.On call
//   - ctx context.Context
//   - getModel entity.GetUserSession
func (_e *UserSessionStorage_Expecter) SoftDeleteSession(ctx interface{}, getModel interface{}) *UserSessionStorage_SoftDeleteSession_Call {
	return &UserSessionStorage_SoftDeleteSession_Call{Call: _e.mock.On("SoftDeleteSession", ctx, getModel)}
}

func (_c *UserSessionStorage_SoftDeleteSession_Call) Run(run func(ctx context.Context, getModel entity.GetUserSession)) *UserSessionStorage_SoftDeleteSession_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.GetUserSession))
	})
	return _c
}

func (_c *UserSessionStorage_SoftDeleteSession_Call) Return(_a0 error) *UserSessionStorage_SoftDeleteSession_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserSessionStorage_SoftDeleteSession_Call) RunAndReturn(run func(context.Context, entity.GetUserSession) error) *UserSessionStorage_SoftDeleteSession_Call {
	_c.Call.Return(run)
	return _c
}

// WithTx provides a mock function with given fields: tx
func (_m *UserSessionStorage) WithTx(tx *database.Transaction) shared.UserSessionStorage {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for WithTx")
	}

	var r0 shared.UserSessionStorage
	if rf, ok := ret.Get(0).(func(*database.Transaction) shared.UserSessionStorage); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(shared.UserSessionStorage)
		}
	}

	return r0
}

// UserSessionStorage_WithTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTx'
type UserSessionStorage_WithTx_Call struct {
	*mock.Call
}

// WithTx is a helper method to define mock.On call
//   - tx *database.Transaction
func (_e *UserSessionStorage_Expecter) WithTx(tx interface{}) *UserSessionStorage_WithTx_Call {
	return &UserSessionStorage_WithTx_Call{Call: _e.mock.On("WithTx", tx)}
}

func (_c *UserSessionStorage_WithTx_Call) Run(run func(tx *database.Transaction)) *UserSessionStorage_WithTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*database.Transaction))
	})
	return _c
}

func (_c *UserSessionStorage_WithTx_Call) Return(_a0 shared.UserSessionStorage) *UserSessionStorage_WithTx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserSessionStorage_WithTx_Call) RunAndReturn(run func(*database.Transaction) shared.UserSessionStorage) *UserSessionStorage_WithTx_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserSessionStorage creates a new instance of UserSessionStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserSessionStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserSessionStorage {
	mock := &UserSessionStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
