// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	user_service "github.com/harmonify/movie-reservation-system/user-service/internal/core/service/user"
	mock "github.com/stretchr/testify/mock"
)

// UserService is an autogenerated mock type for the UserService type
type UserService struct {
	mock.Mock
}

type UserService_Expecter struct {
	mock *mock.Mock
}

func (_m *UserService) EXPECT() *UserService_Expecter {
	return &UserService_Expecter{mock: &_m.Mock}
}

// GetUser provides a mock function with given fields: ctx, p
func (_m *UserService) GetUser(ctx context.Context, p user_service.GetUserParam) (*user_service.GetUserResult, error) {
	ret := _m.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for GetUser")
	}

	var r0 *user_service.GetUserResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, user_service.GetUserParam) (*user_service.GetUserResult, error)); ok {
		return rf(ctx, p)
	}
	if rf, ok := ret.Get(0).(func(context.Context, user_service.GetUserParam) *user_service.GetUserResult); ok {
		r0 = rf(ctx, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user_service.GetUserResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, user_service.GetUserParam) error); ok {
		r1 = rf(ctx, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_GetUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetUser'
type UserService_GetUser_Call struct {
	*mock.Call
}

// GetUser is a helper method to define mock.On call
//   - ctx context.Context
//   - p user_service.GetUserParam
func (_e *UserService_Expecter) GetUser(ctx interface{}, p interface{}) *UserService_GetUser_Call {
	return &UserService_GetUser_Call{Call: _e.mock.On("GetUser", ctx, p)}
}

func (_c *UserService_GetUser_Call) Run(run func(ctx context.Context, p user_service.GetUserParam)) *UserService_GetUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(user_service.GetUserParam))
	})
	return _c
}

func (_c *UserService_GetUser_Call) Return(_a0 *user_service.GetUserResult, _a1 error) *UserService_GetUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_GetUser_Call) RunAndReturn(run func(context.Context, user_service.GetUserParam) (*user_service.GetUserResult, error)) *UserService_GetUser_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUser provides a mock function with given fields: ctx, p
func (_m *UserService) UpdateUser(ctx context.Context, p user_service.UpdateUserParam) (*user_service.UpdateUserResult, error) {
	ret := _m.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUser")
	}

	var r0 *user_service.UpdateUserResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, user_service.UpdateUserParam) (*user_service.UpdateUserResult, error)); ok {
		return rf(ctx, p)
	}
	if rf, ok := ret.Get(0).(func(context.Context, user_service.UpdateUserParam) *user_service.UpdateUserResult); ok {
		r0 = rf(ctx, p)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*user_service.UpdateUserResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, user_service.UpdateUserParam) error); ok {
		r1 = rf(ctx, p)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserService_UpdateUser_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUser'
type UserService_UpdateUser_Call struct {
	*mock.Call
}

// UpdateUser is a helper method to define mock.On call
//   - ctx context.Context
//   - p user_service.UpdateUserParam
func (_e *UserService_Expecter) UpdateUser(ctx interface{}, p interface{}) *UserService_UpdateUser_Call {
	return &UserService_UpdateUser_Call{Call: _e.mock.On("UpdateUser", ctx, p)}
}

func (_c *UserService_UpdateUser_Call) Run(run func(ctx context.Context, p user_service.UpdateUserParam)) *UserService_UpdateUser_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(user_service.UpdateUserParam))
	})
	return _c
}

func (_c *UserService_UpdateUser_Call) Return(_a0 *user_service.UpdateUserResult, _a1 error) *UserService_UpdateUser_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserService_UpdateUser_Call) RunAndReturn(run func(context.Context, user_service.UpdateUserParam) (*user_service.UpdateUserResult, error)) *UserService_UpdateUser_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserService creates a new instance of UserService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserService(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserService {
	mock := &UserService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
