// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/harmonify/movie-reservation-system/pkg/database"
	entity "github.com/harmonify/movie-reservation-system/user-service/internal/core/entity"

	mock "github.com/stretchr/testify/mock"

	shared "github.com/harmonify/movie-reservation-system/user-service/internal/core/shared"
)

// UserKeyStorage is an autogenerated mock type for the UserKeyStorage type
type UserKeyStorage struct {
	mock.Mock
}

type UserKeyStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *UserKeyStorage) EXPECT() *UserKeyStorage_Expecter {
	return &UserKeyStorage_Expecter{mock: &_m.Mock}
}

// FindUserKey provides a mock function with given fields: ctx, findModel
func (_m *UserKeyStorage) FindUserKey(ctx context.Context, findModel entity.FindUserKey) (*entity.UserKey, error) {
	ret := _m.Called(ctx, findModel)

	if len(ret) == 0 {
		panic("no return value specified for FindUserKey")
	}

	var r0 *entity.UserKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.FindUserKey) (*entity.UserKey, error)); ok {
		return rf(ctx, findModel)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.FindUserKey) *entity.UserKey); ok {
		r0 = rf(ctx, findModel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.UserKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.FindUserKey) error); ok {
		r1 = rf(ctx, findModel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserKeyStorage_FindUserKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindUserKey'
type UserKeyStorage_FindUserKey_Call struct {
	*mock.Call
}

// FindUserKey is a helper method to define mock.On call
//   - ctx context.Context
//   - findModel entity.FindUserKey
func (_e *UserKeyStorage_Expecter) FindUserKey(ctx interface{}, findModel interface{}) *UserKeyStorage_FindUserKey_Call {
	return &UserKeyStorage_FindUserKey_Call{Call: _e.mock.On("FindUserKey", ctx, findModel)}
}

func (_c *UserKeyStorage_FindUserKey_Call) Run(run func(ctx context.Context, findModel entity.FindUserKey)) *UserKeyStorage_FindUserKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.FindUserKey))
	})
	return _c
}

func (_c *UserKeyStorage_FindUserKey_Call) Return(_a0 *entity.UserKey, _a1 error) *UserKeyStorage_FindUserKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserKeyStorage_FindUserKey_Call) RunAndReturn(run func(context.Context, entity.FindUserKey) (*entity.UserKey, error)) *UserKeyStorage_FindUserKey_Call {
	_c.Call.Return(run)
	return _c
}

// SaveUserKey provides a mock function with given fields: ctx, createModel
func (_m *UserKeyStorage) SaveUserKey(ctx context.Context, createModel entity.SaveUserKey) (*entity.UserKey, error) {
	ret := _m.Called(ctx, createModel)

	if len(ret) == 0 {
		panic("no return value specified for SaveUserKey")
	}

	var r0 *entity.UserKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.SaveUserKey) (*entity.UserKey, error)); ok {
		return rf(ctx, createModel)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.SaveUserKey) *entity.UserKey); ok {
		r0 = rf(ctx, createModel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.UserKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.SaveUserKey) error); ok {
		r1 = rf(ctx, createModel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserKeyStorage_SaveUserKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveUserKey'
type UserKeyStorage_SaveUserKey_Call struct {
	*mock.Call
}

// SaveUserKey is a helper method to define mock.On call
//   - ctx context.Context
//   - createModel entity.SaveUserKey
func (_e *UserKeyStorage_Expecter) SaveUserKey(ctx interface{}, createModel interface{}) *UserKeyStorage_SaveUserKey_Call {
	return &UserKeyStorage_SaveUserKey_Call{Call: _e.mock.On("SaveUserKey", ctx, createModel)}
}

func (_c *UserKeyStorage_SaveUserKey_Call) Run(run func(ctx context.Context, createModel entity.SaveUserKey)) *UserKeyStorage_SaveUserKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.SaveUserKey))
	})
	return _c
}

func (_c *UserKeyStorage_SaveUserKey_Call) Return(_a0 *entity.UserKey, _a1 error) *UserKeyStorage_SaveUserKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserKeyStorage_SaveUserKey_Call) RunAndReturn(run func(context.Context, entity.SaveUserKey) (*entity.UserKey, error)) *UserKeyStorage_SaveUserKey_Call {
	_c.Call.Return(run)
	return _c
}

// SoftDeleteUserKey provides a mock function with given fields: ctx, findModel
func (_m *UserKeyStorage) SoftDeleteUserKey(ctx context.Context, findModel entity.FindUserKey) error {
	ret := _m.Called(ctx, findModel)

	if len(ret) == 0 {
		panic("no return value specified for SoftDeleteUserKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.FindUserKey) error); ok {
		r0 = rf(ctx, findModel)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UserKeyStorage_SoftDeleteUserKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SoftDeleteUserKey'
type UserKeyStorage_SoftDeleteUserKey_Call struct {
	*mock.Call
}

// SoftDeleteUserKey is a helper method to define mock.On call
//   - ctx context.Context
//   - findModel entity.FindUserKey
func (_e *UserKeyStorage_Expecter) SoftDeleteUserKey(ctx interface{}, findModel interface{}) *UserKeyStorage_SoftDeleteUserKey_Call {
	return &UserKeyStorage_SoftDeleteUserKey_Call{Call: _e.mock.On("SoftDeleteUserKey", ctx, findModel)}
}

func (_c *UserKeyStorage_SoftDeleteUserKey_Call) Run(run func(ctx context.Context, findModel entity.FindUserKey)) *UserKeyStorage_SoftDeleteUserKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.FindUserKey))
	})
	return _c
}

func (_c *UserKeyStorage_SoftDeleteUserKey_Call) Return(_a0 error) *UserKeyStorage_SoftDeleteUserKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserKeyStorage_SoftDeleteUserKey_Call) RunAndReturn(run func(context.Context, entity.FindUserKey) error) *UserKeyStorage_SoftDeleteUserKey_Call {
	_c.Call.Return(run)
	return _c
}

// UpdateUserKey provides a mock function with given fields: ctx, findModel, updateModel
func (_m *UserKeyStorage) UpdateUserKey(ctx context.Context, findModel entity.FindUserKey, updateModel entity.UpdateUserKey) (*entity.UserKey, error) {
	ret := _m.Called(ctx, findModel, updateModel)

	if len(ret) == 0 {
		panic("no return value specified for UpdateUserKey")
	}

	var r0 *entity.UserKey
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.FindUserKey, entity.UpdateUserKey) (*entity.UserKey, error)); ok {
		return rf(ctx, findModel, updateModel)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.FindUserKey, entity.UpdateUserKey) *entity.UserKey); ok {
		r0 = rf(ctx, findModel, updateModel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.UserKey)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.FindUserKey, entity.UpdateUserKey) error); ok {
		r1 = rf(ctx, findModel, updateModel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UserKeyStorage_UpdateUserKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'UpdateUserKey'
type UserKeyStorage_UpdateUserKey_Call struct {
	*mock.Call
}

// UpdateUserKey is a helper method to define mock.On call
//   - ctx context.Context
//   - findModel entity.FindUserKey
//   - updateModel entity.UpdateUserKey
func (_e *UserKeyStorage_Expecter) UpdateUserKey(ctx interface{}, findModel interface{}, updateModel interface{}) *UserKeyStorage_UpdateUserKey_Call {
	return &UserKeyStorage_UpdateUserKey_Call{Call: _e.mock.On("UpdateUserKey", ctx, findModel, updateModel)}
}

func (_c *UserKeyStorage_UpdateUserKey_Call) Run(run func(ctx context.Context, findModel entity.FindUserKey, updateModel entity.UpdateUserKey)) *UserKeyStorage_UpdateUserKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.FindUserKey), args[2].(entity.UpdateUserKey))
	})
	return _c
}

func (_c *UserKeyStorage_UpdateUserKey_Call) Return(_a0 *entity.UserKey, _a1 error) *UserKeyStorage_UpdateUserKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *UserKeyStorage_UpdateUserKey_Call) RunAndReturn(run func(context.Context, entity.FindUserKey, entity.UpdateUserKey) (*entity.UserKey, error)) *UserKeyStorage_UpdateUserKey_Call {
	_c.Call.Return(run)
	return _c
}

// WithTx provides a mock function with given fields: tx
func (_m *UserKeyStorage) WithTx(tx *database.Transaction) shared.UserKeyStorage {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for WithTx")
	}

	var r0 shared.UserKeyStorage
	if rf, ok := ret.Get(0).(func(*database.Transaction) shared.UserKeyStorage); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(shared.UserKeyStorage)
		}
	}

	return r0
}

// UserKeyStorage_WithTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTx'
type UserKeyStorage_WithTx_Call struct {
	*mock.Call
}

// WithTx is a helper method to define mock.On call
//   - tx *database.Transaction
func (_e *UserKeyStorage_Expecter) WithTx(tx interface{}) *UserKeyStorage_WithTx_Call {
	return &UserKeyStorage_WithTx_Call{Call: _e.mock.On("WithTx", tx)}
}

func (_c *UserKeyStorage_WithTx_Call) Run(run func(tx *database.Transaction)) *UserKeyStorage_WithTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*database.Transaction))
	})
	return _c
}

func (_c *UserKeyStorage_WithTx_Call) Return(_a0 shared.UserKeyStorage) *UserKeyStorage_WithTx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *UserKeyStorage_WithTx_Call) RunAndReturn(run func(*database.Transaction) shared.UserKeyStorage) *UserKeyStorage_WithTx_Call {
	_c.Call.Return(run)
	return _c
}

// NewUserKeyStorage creates a new instance of UserKeyStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserKeyStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserKeyStorage {
	mock := &UserKeyStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
