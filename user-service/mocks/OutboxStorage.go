// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	database "github.com/harmonify/movie-reservation-system/pkg/database"
	entity "github.com/harmonify/movie-reservation-system/user-service/internal/core/entity"

	mock "github.com/stretchr/testify/mock"

	shared "github.com/harmonify/movie-reservation-system/user-service/internal/core/shared"
)

// OutboxStorage is an autogenerated mock type for the OutboxStorage type
type OutboxStorage struct {
	mock.Mock
}

type OutboxStorage_Expecter struct {
	mock *mock.Mock
}

func (_m *OutboxStorage) EXPECT() *OutboxStorage_Expecter {
	return &OutboxStorage_Expecter{mock: &_m.Mock}
}

// SaveOutbox provides a mock function with given fields: ctx, createModel
func (_m *OutboxStorage) SaveOutbox(ctx context.Context, createModel entity.SaveUserOutbox) (*entity.UserOutbox, error) {
	ret := _m.Called(ctx, createModel)

	if len(ret) == 0 {
		panic("no return value specified for SaveOutbox")
	}

	var r0 *entity.UserOutbox
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, entity.SaveUserOutbox) (*entity.UserOutbox, error)); ok {
		return rf(ctx, createModel)
	}
	if rf, ok := ret.Get(0).(func(context.Context, entity.SaveUserOutbox) *entity.UserOutbox); ok {
		r0 = rf(ctx, createModel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*entity.UserOutbox)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, entity.SaveUserOutbox) error); ok {
		r1 = rf(ctx, createModel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// OutboxStorage_SaveOutbox_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SaveOutbox'
type OutboxStorage_SaveOutbox_Call struct {
	*mock.Call
}

// SaveOutbox is a helper method to define mock.On call
//   - ctx context.Context
//   - createModel entity.SaveUserOutbox
func (_e *OutboxStorage_Expecter) SaveOutbox(ctx interface{}, createModel interface{}) *OutboxStorage_SaveOutbox_Call {
	return &OutboxStorage_SaveOutbox_Call{Call: _e.mock.On("SaveOutbox", ctx, createModel)}
}

func (_c *OutboxStorage_SaveOutbox_Call) Run(run func(ctx context.Context, createModel entity.SaveUserOutbox)) *OutboxStorage_SaveOutbox_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(entity.SaveUserOutbox))
	})
	return _c
}

func (_c *OutboxStorage_SaveOutbox_Call) Return(_a0 *entity.UserOutbox, _a1 error) *OutboxStorage_SaveOutbox_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *OutboxStorage_SaveOutbox_Call) RunAndReturn(run func(context.Context, entity.SaveUserOutbox) (*entity.UserOutbox, error)) *OutboxStorage_SaveOutbox_Call {
	_c.Call.Return(run)
	return _c
}

// WithTx provides a mock function with given fields: tx
func (_m *OutboxStorage) WithTx(tx *database.Transaction) shared.OutboxStorage {
	ret := _m.Called(tx)

	if len(ret) == 0 {
		panic("no return value specified for WithTx")
	}

	var r0 shared.OutboxStorage
	if rf, ok := ret.Get(0).(func(*database.Transaction) shared.OutboxStorage); ok {
		r0 = rf(tx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(shared.OutboxStorage)
		}
	}

	return r0
}

// OutboxStorage_WithTx_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'WithTx'
type OutboxStorage_WithTx_Call struct {
	*mock.Call
}

// WithTx is a helper method to define mock.On call
//   - tx *database.Transaction
func (_e *OutboxStorage_Expecter) WithTx(tx interface{}) *OutboxStorage_WithTx_Call {
	return &OutboxStorage_WithTx_Call{Call: _e.mock.On("WithTx", tx)}
}

func (_c *OutboxStorage_WithTx_Call) Run(run func(tx *database.Transaction)) *OutboxStorage_WithTx_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*database.Transaction))
	})
	return _c
}

func (_c *OutboxStorage_WithTx_Call) Return(_a0 shared.OutboxStorage) *OutboxStorage_WithTx_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OutboxStorage_WithTx_Call) RunAndReturn(run func(*database.Transaction) shared.OutboxStorage) *OutboxStorage_WithTx_Call {
	_c.Call.Return(run)
	return _c
}

// NewOutboxStorage creates a new instance of OutboxStorage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOutboxStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *OutboxStorage {
	mock := &OutboxStorage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
