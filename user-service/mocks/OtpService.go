// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	otp_service "github.com/harmonify/movie-reservation-system/user-service/internal/core/service/otp"
	mock "github.com/stretchr/testify/mock"
)

// OtpService is an autogenerated mock type for the OtpService type
type OtpService struct {
	mock.Mock
}

type OtpService_Expecter struct {
	mock *mock.Mock
}

func (_m *OtpService) EXPECT() *OtpService_Expecter {
	return &OtpService_Expecter{mock: &_m.Mock}
}

// SendPhoneNumberVerificationOtp provides a mock function with given fields: ctx, p
func (_m *OtpService) SendPhoneNumberVerificationOtp(ctx context.Context, p otp_service.SendPhoneNumberVerificationOtpParam) error {
	ret := _m.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for SendPhoneNumberVerificationOtp")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, otp_service.SendPhoneNumberVerificationOtpParam) error); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OtpService_SendPhoneNumberVerificationOtp_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendPhoneNumberVerificationOtp'
type OtpService_SendPhoneNumberVerificationOtp_Call struct {
	*mock.Call
}

// SendPhoneNumberVerificationOtp is a helper method to define mock.On call
//   - ctx context.Context
//   - p otp_service.SendPhoneNumberVerificationOtpParam
func (_e *OtpService_Expecter) SendPhoneNumberVerificationOtp(ctx interface{}, p interface{}) *OtpService_SendPhoneNumberVerificationOtp_Call {
	return &OtpService_SendPhoneNumberVerificationOtp_Call{Call: _e.mock.On("SendPhoneNumberVerificationOtp", ctx, p)}
}

func (_c *OtpService_SendPhoneNumberVerificationOtp_Call) Run(run func(ctx context.Context, p otp_service.SendPhoneNumberVerificationOtpParam)) *OtpService_SendPhoneNumberVerificationOtp_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(otp_service.SendPhoneNumberVerificationOtpParam))
	})
	return _c
}

func (_c *OtpService_SendPhoneNumberVerificationOtp_Call) Return(_a0 error) *OtpService_SendPhoneNumberVerificationOtp_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OtpService_SendPhoneNumberVerificationOtp_Call) RunAndReturn(run func(context.Context, otp_service.SendPhoneNumberVerificationOtpParam) error) *OtpService_SendPhoneNumberVerificationOtp_Call {
	_c.Call.Return(run)
	return _c
}

// SendSignupEmail provides a mock function with given fields: ctx, p
func (_m *OtpService) SendSignupEmail(ctx context.Context, p otp_service.SendSignupEmailParam) error {
	ret := _m.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for SendSignupEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, otp_service.SendSignupEmailParam) error); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OtpService_SendSignupEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendSignupEmail'
type OtpService_SendSignupEmail_Call struct {
	*mock.Call
}

// SendSignupEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - p otp_service.SendSignupEmailParam
func (_e *OtpService_Expecter) SendSignupEmail(ctx interface{}, p interface{}) *OtpService_SendSignupEmail_Call {
	return &OtpService_SendSignupEmail_Call{Call: _e.mock.On("SendSignupEmail", ctx, p)}
}

func (_c *OtpService_SendSignupEmail_Call) Run(run func(ctx context.Context, p otp_service.SendSignupEmailParam)) *OtpService_SendSignupEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(otp_service.SendSignupEmailParam))
	})
	return _c
}

func (_c *OtpService_SendSignupEmail_Call) Return(_a0 error) *OtpService_SendSignupEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OtpService_SendSignupEmail_Call) RunAndReturn(run func(context.Context, otp_service.SendSignupEmailParam) error) *OtpService_SendSignupEmail_Call {
	_c.Call.Return(run)
	return _c
}

// SendVerificationEmail provides a mock function with given fields: ctx, p
func (_m *OtpService) SendVerificationEmail(ctx context.Context, p otp_service.SendVerificationEmailParam) error {
	ret := _m.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for SendVerificationEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, otp_service.SendVerificationEmailParam) error); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OtpService_SendVerificationEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendVerificationEmail'
type OtpService_SendVerificationEmail_Call struct {
	*mock.Call
}

// SendVerificationEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - p otp_service.SendVerificationEmailParam
func (_e *OtpService_Expecter) SendVerificationEmail(ctx interface{}, p interface{}) *OtpService_SendVerificationEmail_Call {
	return &OtpService_SendVerificationEmail_Call{Call: _e.mock.On("SendVerificationEmail", ctx, p)}
}

func (_c *OtpService_SendVerificationEmail_Call) Run(run func(ctx context.Context, p otp_service.SendVerificationEmailParam)) *OtpService_SendVerificationEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(otp_service.SendVerificationEmailParam))
	})
	return _c
}

func (_c *OtpService_SendVerificationEmail_Call) Return(_a0 error) *OtpService_SendVerificationEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OtpService_SendVerificationEmail_Call) RunAndReturn(run func(context.Context, otp_service.SendVerificationEmailParam) error) *OtpService_SendVerificationEmail_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyEmail provides a mock function with given fields: ctx, p
func (_m *OtpService) VerifyEmail(ctx context.Context, p otp_service.VerifyEmailParam) error {
	ret := _m.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for VerifyEmail")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, otp_service.VerifyEmailParam) error); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OtpService_VerifyEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyEmail'
type OtpService_VerifyEmail_Call struct {
	*mock.Call
}

// VerifyEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - p otp_service.VerifyEmailParam
func (_e *OtpService_Expecter) VerifyEmail(ctx interface{}, p interface{}) *OtpService_VerifyEmail_Call {
	return &OtpService_VerifyEmail_Call{Call: _e.mock.On("VerifyEmail", ctx, p)}
}

func (_c *OtpService_VerifyEmail_Call) Run(run func(ctx context.Context, p otp_service.VerifyEmailParam)) *OtpService_VerifyEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(otp_service.VerifyEmailParam))
	})
	return _c
}

func (_c *OtpService_VerifyEmail_Call) Return(_a0 error) *OtpService_VerifyEmail_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OtpService_VerifyEmail_Call) RunAndReturn(run func(context.Context, otp_service.VerifyEmailParam) error) *OtpService_VerifyEmail_Call {
	_c.Call.Return(run)
	return _c
}

// VerifyPhoneNumber provides a mock function with given fields: ctx, p
func (_m *OtpService) VerifyPhoneNumber(ctx context.Context, p otp_service.VerifyPhoneNumberParam) error {
	ret := _m.Called(ctx, p)

	if len(ret) == 0 {
		panic("no return value specified for VerifyPhoneNumber")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, otp_service.VerifyPhoneNumberParam) error); ok {
		r0 = rf(ctx, p)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// OtpService_VerifyPhoneNumber_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VerifyPhoneNumber'
type OtpService_VerifyPhoneNumber_Call struct {
	*mock.Call
}

// VerifyPhoneNumber is a helper method to define mock.On call
//   - ctx context.Context
//   - p otp_service.VerifyPhoneNumberParam
func (_e *OtpService_Expecter) VerifyPhoneNumber(ctx interface{}, p interface{}) *OtpService_VerifyPhoneNumber_Call {
	return &OtpService_VerifyPhoneNumber_Call{Call: _e.mock.On("VerifyPhoneNumber", ctx, p)}
}

func (_c *OtpService_VerifyPhoneNumber_Call) Run(run func(ctx context.Context, p otp_service.VerifyPhoneNumberParam)) *OtpService_VerifyPhoneNumber_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(otp_service.VerifyPhoneNumberParam))
	})
	return _c
}

func (_c *OtpService_VerifyPhoneNumber_Call) Return(_a0 error) *OtpService_VerifyPhoneNumber_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *OtpService_VerifyPhoneNumber_Call) RunAndReturn(run func(context.Context, otp_service.VerifyPhoneNumberParam) error) *OtpService_VerifyPhoneNumber_Call {
	_c.Call.Return(run)
	return _c
}

// NewOtpService creates a new instance of OtpService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewOtpService(t interface {
	mock.TestingT
	Cleanup(func())
}) *OtpService {
	mock := &OtpService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
