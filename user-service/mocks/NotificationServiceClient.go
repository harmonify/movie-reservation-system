// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	context "context"

	grpc "google.golang.org/grpc"

	mock "github.com/stretchr/testify/mock"

	notification_proto "github.com/harmonify/movie-reservation-system/user-service/internal/driven/proto/notification"
)

// NotificationServiceClient is an autogenerated mock type for the NotificationServiceClient type
type NotificationServiceClient struct {
	mock.Mock
}

type NotificationServiceClient_Expecter struct {
	mock *mock.Mock
}

func (_m *NotificationServiceClient) EXPECT() *NotificationServiceClient_Expecter {
	return &NotificationServiceClient_Expecter{mock: &_m.Mock}
}

// BulkSendSms provides a mock function with given fields: ctx, in, opts
func (_m *NotificationServiceClient) BulkSendSms(ctx context.Context, in *notification_proto.BulkSendSmsRequest, opts ...grpc.CallOption) (*notification_proto.BulkSendSmsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for BulkSendSms")
	}

	var r0 *notification_proto.BulkSendSmsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *notification_proto.BulkSendSmsRequest, ...grpc.CallOption) (*notification_proto.BulkSendSmsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *notification_proto.BulkSendSmsRequest, ...grpc.CallOption) *notification_proto.BulkSendSmsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*notification_proto.BulkSendSmsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *notification_proto.BulkSendSmsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotificationServiceClient_BulkSendSms_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BulkSendSms'
type NotificationServiceClient_BulkSendSms_Call struct {
	*mock.Call
}

// BulkSendSms is a helper method to define mock.On call
//   - ctx context.Context
//   - in *notification_proto.BulkSendSmsRequest
//   - opts ...grpc.CallOption
func (_e *NotificationServiceClient_Expecter) BulkSendSms(ctx interface{}, in interface{}, opts ...interface{}) *NotificationServiceClient_BulkSendSms_Call {
	return &NotificationServiceClient_BulkSendSms_Call{Call: _e.mock.On("BulkSendSms",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NotificationServiceClient_BulkSendSms_Call) Run(run func(ctx context.Context, in *notification_proto.BulkSendSmsRequest, opts ...grpc.CallOption)) *NotificationServiceClient_BulkSendSms_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*notification_proto.BulkSendSmsRequest), variadicArgs...)
	})
	return _c
}

func (_c *NotificationServiceClient_BulkSendSms_Call) Return(_a0 *notification_proto.BulkSendSmsResponse, _a1 error) *NotificationServiceClient_BulkSendSms_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NotificationServiceClient_BulkSendSms_Call) RunAndReturn(run func(context.Context, *notification_proto.BulkSendSmsRequest, ...grpc.CallOption) (*notification_proto.BulkSendSmsResponse, error)) *NotificationServiceClient_BulkSendSms_Call {
	_c.Call.Return(run)
	return _c
}

// SendEmail provides a mock function with given fields: ctx, in, opts
func (_m *NotificationServiceClient) SendEmail(ctx context.Context, in *notification_proto.SendEmailRequest, opts ...grpc.CallOption) (*notification_proto.SendEmailResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendEmail")
	}

	var r0 *notification_proto.SendEmailResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *notification_proto.SendEmailRequest, ...grpc.CallOption) (*notification_proto.SendEmailResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *notification_proto.SendEmailRequest, ...grpc.CallOption) *notification_proto.SendEmailResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*notification_proto.SendEmailResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *notification_proto.SendEmailRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotificationServiceClient_SendEmail_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendEmail'
type NotificationServiceClient_SendEmail_Call struct {
	*mock.Call
}

// SendEmail is a helper method to define mock.On call
//   - ctx context.Context
//   - in *notification_proto.SendEmailRequest
//   - opts ...grpc.CallOption
func (_e *NotificationServiceClient_Expecter) SendEmail(ctx interface{}, in interface{}, opts ...interface{}) *NotificationServiceClient_SendEmail_Call {
	return &NotificationServiceClient_SendEmail_Call{Call: _e.mock.On("SendEmail",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NotificationServiceClient_SendEmail_Call) Run(run func(ctx context.Context, in *notification_proto.SendEmailRequest, opts ...grpc.CallOption)) *NotificationServiceClient_SendEmail_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*notification_proto.SendEmailRequest), variadicArgs...)
	})
	return _c
}

func (_c *NotificationServiceClient_SendEmail_Call) Return(_a0 *notification_proto.SendEmailResponse, _a1 error) *NotificationServiceClient_SendEmail_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NotificationServiceClient_SendEmail_Call) RunAndReturn(run func(context.Context, *notification_proto.SendEmailRequest, ...grpc.CallOption) (*notification_proto.SendEmailResponse, error)) *NotificationServiceClient_SendEmail_Call {
	_c.Call.Return(run)
	return _c
}

// SendSms provides a mock function with given fields: ctx, in, opts
func (_m *NotificationServiceClient) SendSms(ctx context.Context, in *notification_proto.SendSmsRequest, opts ...grpc.CallOption) (*notification_proto.SendSmsResponse, error) {
	_va := make([]interface{}, len(opts))
	for _i := range opts {
		_va[_i] = opts[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx, in)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	if len(ret) == 0 {
		panic("no return value specified for SendSms")
	}

	var r0 *notification_proto.SendSmsResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *notification_proto.SendSmsRequest, ...grpc.CallOption) (*notification_proto.SendSmsResponse, error)); ok {
		return rf(ctx, in, opts...)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *notification_proto.SendSmsRequest, ...grpc.CallOption) *notification_proto.SendSmsResponse); ok {
		r0 = rf(ctx, in, opts...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*notification_proto.SendSmsResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *notification_proto.SendSmsRequest, ...grpc.CallOption) error); ok {
		r1 = rf(ctx, in, opts...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NotificationServiceClient_SendSms_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SendSms'
type NotificationServiceClient_SendSms_Call struct {
	*mock.Call
}

// SendSms is a helper method to define mock.On call
//   - ctx context.Context
//   - in *notification_proto.SendSmsRequest
//   - opts ...grpc.CallOption
func (_e *NotificationServiceClient_Expecter) SendSms(ctx interface{}, in interface{}, opts ...interface{}) *NotificationServiceClient_SendSms_Call {
	return &NotificationServiceClient_SendSms_Call{Call: _e.mock.On("SendSms",
		append([]interface{}{ctx, in}, opts...)...)}
}

func (_c *NotificationServiceClient_SendSms_Call) Run(run func(ctx context.Context, in *notification_proto.SendSmsRequest, opts ...grpc.CallOption)) *NotificationServiceClient_SendSms_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]grpc.CallOption, len(args)-2)
		for i, a := range args[2:] {
			if a != nil {
				variadicArgs[i] = a.(grpc.CallOption)
			}
		}
		run(args[0].(context.Context), args[1].(*notification_proto.SendSmsRequest), variadicArgs...)
	})
	return _c
}

func (_c *NotificationServiceClient_SendSms_Call) Return(_a0 *notification_proto.SendSmsResponse, _a1 error) *NotificationServiceClient_SendSms_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *NotificationServiceClient_SendSms_Call) RunAndReturn(run func(context.Context, *notification_proto.SendSmsRequest, ...grpc.CallOption) (*notification_proto.SendSmsResponse, error)) *NotificationServiceClient_SendSms_Call {
	_c.Call.Return(run)
	return _c
}

// NewNotificationServiceClient creates a new instance of NotificationServiceClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewNotificationServiceClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *NotificationServiceClient {
	mock := &NotificationServiceClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
