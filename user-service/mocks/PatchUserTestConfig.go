// Code generated by mockery v2.42.1. DO NOT EDIT.

package mocks

import (
	mock "github.com/stretchr/testify/mock"

	user_rest "github.com/harmonify/movie-reservation-system/user-service/internal/driver/http/user"
)

// PatchUserTestConfig is an autogenerated mock type for the PatchUserTestConfig type
type PatchUserTestConfig struct {
	mock.Mock
}

type PatchUserTestConfig_Expecter struct {
	mock *mock.Mock
}

func (_m *PatchUserTestConfig) EXPECT() *PatchUserTestConfig_Expecter {
	return &PatchUserTestConfig_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields:
func (_m *PatchUserTestConfig) Execute() user_rest.PatchUserReq {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 user_rest.PatchUserReq
	if rf, ok := ret.Get(0).(func() user_rest.PatchUserReq); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(user_rest.PatchUserReq)
	}

	return r0
}

// PatchUserTestConfig_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type PatchUserTestConfig_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
func (_e *PatchUserTestConfig_Expecter) Execute() *PatchUserTestConfig_Execute_Call {
	return &PatchUserTestConfig_Execute_Call{Call: _e.mock.On("Execute")}
}

func (_c *PatchUserTestConfig_Execute_Call) Run(run func()) *PatchUserTestConfig_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *PatchUserTestConfig_Execute_Call) Return(_a0 user_rest.PatchUserReq) *PatchUserTestConfig_Execute_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *PatchUserTestConfig_Execute_Call) RunAndReturn(run func() user_rest.PatchUserReq) *PatchUserTestConfig_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// NewPatchUserTestConfig creates a new instance of PatchUserTestConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewPatchUserTestConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *PatchUserTestConfig {
	mock := &PatchUserTestConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
