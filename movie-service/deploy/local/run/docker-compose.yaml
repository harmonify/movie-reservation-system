# Connect with this URI: "mongodb://root:root@localhost:27017/?replicaSet=rs0"
services:
    movie-service-mongodb:
        image: mongo:7.0
        environment:
            MONGO_INITDB_ROOT_USERNAME: "root"
            MONGO_INITDB_ROOT_PASSWORD: "root"
        volumes:
            - ../../../.data/mongodb/db:/data/db
            - "../../../.data/mongodb/configdb:/data/configdb"
            # Mount the keyFile for internal replica set authentication.
            - ./mongo.key:/etc/secrets/mongo.key:ro
        command:
            [
                "--replSet",
                "rs0",
                "--bind_ip_all",
                "--port",
                "27017",
                "--keyFile",
                "/etc/secrets/mongo.key",
            ]
        extra_hosts:
            - "host.docker.internal:host-gateway"
        expose:
            - "27017"
        ports:
            - "27017:27017"
        networks:
            - movie-service-net
        healthcheck:
            test: 'echo ''db.runCommand("ping").ok'' | mongosh --quiet'
            interval: 10s
            timeout: 5s
            retries: 3
            start_period: 10s

    movie-service-mongodb-init:
        container_name: movie-service-mongodb-init
        image: "mongo:7.0"
        environment:
            # The MONGO_URI is used to connect to the MongoDB instance. It must not contain the replica set name.
            MONGO_URI: "mongodb://root:root@movie-service-mongodb:27017"
            MONGO_REPLICA_SET_NAME: "rs0"
            MONGO_REPLICA_SET_MEMBER: "host.docker.internal:27017"
        command: "/init.sh"
        volumes:
            - ./init-single-node-replica-set.sh:/init.sh
        depends_on:
            movie-service-mongodb:
                condition: service_healthy
        networks:
            - movie-service-net

    movie-service-redis:
        image: redis:7
        command: ["redis-server", "--requirepass", "secret"]
        ports:
            - "6380:6379"
        networks:
            - movie-service-net
